; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --function-signature --check-attributes --check-globals
; RUN: opt -aa-pipeline=basic-aa -passes=attributor -attributor-manifest-internal  -attributor-annotate-decl-cs  -S < %s | FileCheck %s --check-prefixes=CHECK,TUNIT
; RUN: opt -aa-pipeline=basic-aa -passes=attributor-cgscc -attributor-manifest-internal  -attributor-annotate-decl-cs -S < %s | FileCheck %s --check-prefixes=CHECK,CGSCC
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

@G = external dso_local global i32, align 4

declare noalias ptr @malloc(i64) inaccessiblememonly

;.
; CHECK: @[[G:[a-zA-Z0-9_$"\\.-]+]] = external dso_local global i32, align 4
;.
define dso_local ptr @internal_only(i32 %arg) {
; TUNIT: Function Attrs: memory(inaccessiblemem: readwrite)
; TUNIT-LABEL: define {{[^@]+}}@internal_only
; TUNIT-SAME: (i32 [[ARG:%.*]]) #[[ATTR0:[0-9]+]] {
; TUNIT-NEXT:  entry:
; TUNIT-NEXT:    [[CONV:%.*]] = sext i32 [[ARG]] to i64
; TUNIT-NEXT:    [[CALL:%.*]] = call noalias ptr @malloc(i64 [[CONV]]) #[[ATTR0]]
; TUNIT-NEXT:    ret ptr [[CALL]]
;
; CGSCC: Function Attrs: memory(inaccessiblemem: readwrite)
; CGSCC-LABEL: define {{[^@]+}}@internal_only
; CGSCC-SAME: (i32 [[ARG:%.*]]) #[[ATTR0:[0-9]+]] {
; CGSCC-NEXT:  entry:
; CGSCC-NEXT:    [[CONV:%.*]] = sext i32 [[ARG]] to i64
; CGSCC-NEXT:    [[CALL:%.*]] = call noalias ptr @malloc(i64 [[CONV]])
; CGSCC-NEXT:    ret ptr [[CALL]]
;
entry:
  %conv = sext i32 %arg to i64
  %call = call ptr @malloc(i64 %conv)
  ret ptr %call
}

define dso_local ptr @internal_only_rec(i32 %arg) {
; TUNIT: Function Attrs: memory(inaccessiblemem: readwrite)
; TUNIT-LABEL: define {{[^@]+}}@internal_only_rec
; TUNIT-SAME: (i32 [[ARG:%.*]]) #[[ATTR0]] {
; TUNIT-NEXT:  entry:
; TUNIT-NEXT:    [[REM:%.*]] = srem i32 [[ARG]], 2
; TUNIT-NEXT:    [[CMP:%.*]] = icmp eq i32 [[REM]], 1
; TUNIT-NEXT:    br i1 [[CMP]], label [[IF_THEN:%.*]], label [[IF_END:%.*]]
; TUNIT:       if.then:
; TUNIT-NEXT:    [[DIV:%.*]] = sdiv i32 [[ARG]], 2
; TUNIT-NEXT:    [[CALL:%.*]] = call noalias ptr @internal_only_rec(i32 [[DIV]]) #[[ATTR0]]
; TUNIT-NEXT:    br label [[RETURN:%.*]]
; TUNIT:       if.end:
; TUNIT-NEXT:    [[CONV:%.*]] = sext i32 [[ARG]] to i64
; TUNIT-NEXT:    [[CALL1:%.*]] = call noalias ptr @malloc(i64 [[CONV]]) #[[ATTR0]]
; TUNIT-NEXT:    br label [[RETURN]]
; TUNIT:       return:
; TUNIT-NEXT:    [[RETVAL_0:%.*]] = phi ptr [ [[CALL]], [[IF_THEN]] ], [ [[CALL1]], [[IF_END]] ]
; TUNIT-NEXT:    ret ptr [[RETVAL_0]]
;
; CGSCC: Function Attrs: memory(inaccessiblemem: readwrite)
; CGSCC-LABEL: define {{[^@]+}}@internal_only_rec
; CGSCC-SAME: (i32 [[ARG:%.*]]) #[[ATTR0]] {
; CGSCC-NEXT:  entry:
; CGSCC-NEXT:    [[REM:%.*]] = srem i32 [[ARG]], 2
; CGSCC-NEXT:    [[CMP:%.*]] = icmp eq i32 [[REM]], 1
; CGSCC-NEXT:    br i1 [[CMP]], label [[IF_THEN:%.*]], label [[IF_END:%.*]]
; CGSCC:       if.then:
; CGSCC-NEXT:    [[DIV:%.*]] = sdiv i32 [[ARG]], 2
; CGSCC-NEXT:    [[CALL:%.*]] = call noalias ptr @internal_only_rec(i32 [[DIV]]) #[[ATTR0]]
; CGSCC-NEXT:    br label [[RETURN:%.*]]
; CGSCC:       if.end:
; CGSCC-NEXT:    [[CONV:%.*]] = sext i32 [[ARG]] to i64
; CGSCC-NEXT:    [[CALL1:%.*]] = call noalias ptr @malloc(i64 [[CONV]])
; CGSCC-NEXT:    br label [[RETURN]]
; CGSCC:       return:
; CGSCC-NEXT:    [[RETVAL_0:%.*]] = phi ptr [ [[CALL]], [[IF_THEN]] ], [ [[CALL1]], [[IF_END]] ]
; CGSCC-NEXT:    ret ptr [[RETVAL_0]]
;
entry:
  %rem = srem i32 %arg, 2
  %cmp = icmp eq i32 %rem, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %div = sdiv i32 %arg, 2
  %call = call ptr @internal_only_rec(i32 %div)
  br label %return

if.end:                                           ; preds = %entry
  %conv = sext i32 %arg to i64
  %call1 = call ptr @malloc(i64 %conv)
  br label %return

return:                                           ; preds = %if.end, %if.then
  %retval.0 = phi ptr [ %call, %if.then ], [ %call1, %if.end ]
  ret ptr %retval.0
}

define dso_local ptr @internal_only_rec_static_helper(i32 %arg) {
; TUNIT: Function Attrs: memory(inaccessiblemem: readwrite)
; TUNIT-LABEL: define {{[^@]+}}@internal_only_rec_static_helper
; TUNIT-SAME: (i32 [[ARG:%.*]]) #[[ATTR0]] {
; TUNIT-NEXT:  entry:
; TUNIT-NEXT:    [[CALL:%.*]] = call noalias ptr @internal_only_rec_static(i32 [[ARG]]) #[[ATTR0]]
; TUNIT-NEXT:    ret ptr [[CALL]]
;
; CGSCC: Function Attrs: memory(inaccessiblemem: readwrite)
; CGSCC-LABEL: define {{[^@]+}}@internal_only_rec_static_helper
; CGSCC-SAME: (i32 [[ARG:%.*]]) #[[ATTR0]] {
; CGSCC-NEXT:  entry:
; CGSCC-NEXT:    [[CALL:%.*]] = call noalias ptr @internal_only_rec_static(i32 [[ARG]])
; CGSCC-NEXT:    ret ptr [[CALL]]
;
entry:
  %call = call ptr @internal_only_rec_static(i32 %arg)
  ret ptr %call
}

define internal ptr @internal_only_rec_static(i32 %arg) {
; TUNIT: Function Attrs: memory(inaccessiblemem: readwrite)
; TUNIT-LABEL: define {{[^@]+}}@internal_only_rec_static
; TUNIT-SAME: (i32 [[ARG:%.*]]) #[[ATTR0]] {
; TUNIT-NEXT:  entry:
; TUNIT-NEXT:    [[REM:%.*]] = srem i32 [[ARG]], 2
; TUNIT-NEXT:    [[CMP:%.*]] = icmp eq i32 [[REM]], 1
; TUNIT-NEXT:    br i1 [[CMP]], label [[IF_THEN:%.*]], label [[IF_END:%.*]]
; TUNIT:       if.then:
; TUNIT-NEXT:    [[DIV:%.*]] = sdiv i32 [[ARG]], 2
; TUNIT-NEXT:    [[CALL:%.*]] = call noalias ptr @internal_only_rec(i32 [[DIV]]) #[[ATTR0]]
; TUNIT-NEXT:    br label [[RETURN:%.*]]
; TUNIT:       if.end:
; TUNIT-NEXT:    [[CONV:%.*]] = sext i32 [[ARG]] to i64
; TUNIT-NEXT:    [[CALL1:%.*]] = call noalias ptr @malloc(i64 [[CONV]]) #[[ATTR0]]
; TUNIT-NEXT:    br label [[RETURN]]
; TUNIT:       return:
; TUNIT-NEXT:    [[RETVAL_0:%.*]] = phi ptr [ [[CALL]], [[IF_THEN]] ], [ [[CALL1]], [[IF_END]] ]
; TUNIT-NEXT:    ret ptr [[RETVAL_0]]
;
; CGSCC: Function Attrs: memory(inaccessiblemem: readwrite)
; CGSCC-LABEL: define {{[^@]+}}@internal_only_rec_static
; CGSCC-SAME: (i32 [[ARG:%.*]]) #[[ATTR0]] {
; CGSCC-NEXT:  entry:
; CGSCC-NEXT:    [[REM:%.*]] = srem i32 [[ARG]], 2
; CGSCC-NEXT:    [[CMP:%.*]] = icmp eq i32 [[REM]], 1
; CGSCC-NEXT:    br i1 [[CMP]], label [[IF_THEN:%.*]], label [[IF_END:%.*]]
; CGSCC:       if.then:
; CGSCC-NEXT:    [[DIV:%.*]] = sdiv i32 [[ARG]], 2
; CGSCC-NEXT:    [[CALL:%.*]] = call noalias ptr @internal_only_rec(i32 [[DIV]])
; CGSCC-NEXT:    br label [[RETURN:%.*]]
; CGSCC:       if.end:
; CGSCC-NEXT:    [[CONV:%.*]] = sext i32 [[ARG]] to i64
; CGSCC-NEXT:    [[CALL1:%.*]] = call noalias ptr @malloc(i64 [[CONV]])
; CGSCC-NEXT:    br label [[RETURN]]
; CGSCC:       return:
; CGSCC-NEXT:    [[RETVAL_0:%.*]] = phi ptr [ [[CALL]], [[IF_THEN]] ], [ [[CALL1]], [[IF_END]] ]
; CGSCC-NEXT:    ret ptr [[RETVAL_0]]
;
entry:
  %rem = srem i32 %arg, 2
  %cmp = icmp eq i32 %rem, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %div = sdiv i32 %arg, 2
  %call = call ptr @internal_only_rec(i32 %div)
  br label %return

if.end:                                           ; preds = %entry
  %conv = sext i32 %arg to i64
  %call1 = call ptr @malloc(i64 %conv)
  br label %return

return:                                           ; preds = %if.end, %if.then
  %retval.0 = phi ptr [ %call, %if.then ], [ %call1, %if.end ]
  ret ptr %retval.0
}

define dso_local ptr @internal_only_rec_static_helper_malloc_noescape(i32 %arg) {
; FIXME: This is actually inaccessiblememonly because the malloced memory does not escape
; TUNIT: Function Attrs: memory(write, inaccessiblemem: readwrite)
; TUNIT-LABEL: define {{[^@]+}}@internal_only_rec_static_helper_malloc_noescape
; TUNIT-SAME: (i32 [[ARG:%.*]]) #[[ATTR1:[0-9]+]] {
; TUNIT-NEXT:  entry:
; TUNIT-NEXT:    [[CALL:%.*]] = call noalias ptr @internal_only_rec_static_malloc_noescape(i32 [[ARG]]) #[[ATTR1]]
; TUNIT-NEXT:    ret ptr [[CALL]]
;
; CGSCC: Function Attrs: memory(write, inaccessiblemem: readwrite)
; CGSCC-LABEL: define {{[^@]+}}@internal_only_rec_static_helper_malloc_noescape
; CGSCC-SAME: (i32 [[ARG:%.*]]) #[[ATTR1:[0-9]+]] {
; CGSCC-NEXT:  entry:
; CGSCC-NEXT:    [[CALL:%.*]] = call noalias ptr @internal_only_rec_static_malloc_noescape(i32 [[ARG]])
; CGSCC-NEXT:    ret ptr [[CALL]]
;
entry:
  %call = call ptr @internal_only_rec_static_malloc_noescape(i32 %arg)
  ret ptr %call
}

define internal ptr @internal_only_rec_static_malloc_noescape(i32 %arg) {
; FIXME: This is actually inaccessiblememonly because the malloced memory does not escape
; TUNIT: Function Attrs: memory(write, inaccessiblemem: readwrite)
; TUNIT-LABEL: define {{[^@]+}}@internal_only_rec_static_malloc_noescape
; TUNIT-SAME: (i32 [[ARG:%.*]]) #[[ATTR1]] {
; TUNIT-NEXT:  entry:
; TUNIT-NEXT:    [[REM:%.*]] = srem i32 [[ARG]], 2
; TUNIT-NEXT:    [[CMP:%.*]] = icmp eq i32 [[REM]], 1
; TUNIT-NEXT:    br i1 [[CMP]], label [[IF_THEN:%.*]], label [[IF_END:%.*]]
; TUNIT:       if.then:
; TUNIT-NEXT:    [[DIV:%.*]] = sdiv i32 [[ARG]], 2
; TUNIT-NEXT:    [[CALL:%.*]] = call noalias ptr @internal_only_rec(i32 [[DIV]]) #[[ATTR0]]
; TUNIT-NEXT:    br label [[RETURN:%.*]]
; TUNIT:       if.end:
; TUNIT-NEXT:    [[CONV:%.*]] = sext i32 [[ARG]] to i64
; TUNIT-NEXT:    [[CALL1:%.*]] = call noalias ptr @malloc(i64 [[CONV]]) #[[ATTR0]]
; TUNIT-NEXT:    br label [[RETURN]]
; TUNIT:       return:
; TUNIT-NEXT:    [[RETVAL_0:%.*]] = phi ptr [ [[CALL]], [[IF_THEN]] ], [ null, [[IF_END]] ]
; TUNIT-NEXT:    ret ptr [[RETVAL_0]]
;
; CGSCC: Function Attrs: memory(write, inaccessiblemem: readwrite)
; CGSCC-LABEL: define {{[^@]+}}@internal_only_rec_static_malloc_noescape
; CGSCC-SAME: (i32 [[ARG:%.*]]) #[[ATTR1]] {
; CGSCC-NEXT:  entry:
; CGSCC-NEXT:    [[REM:%.*]] = srem i32 [[ARG]], 2
; CGSCC-NEXT:    [[CMP:%.*]] = icmp eq i32 [[REM]], 1
; CGSCC-NEXT:    br i1 [[CMP]], label [[IF_THEN:%.*]], label [[IF_END:%.*]]
; CGSCC:       if.then:
; CGSCC-NEXT:    [[DIV:%.*]] = sdiv i32 [[ARG]], 2
; CGSCC-NEXT:    [[CALL:%.*]] = call noalias ptr @internal_only_rec(i32 [[DIV]])
; CGSCC-NEXT:    br label [[RETURN:%.*]]
; CGSCC:       if.end:
; CGSCC-NEXT:    [[CONV:%.*]] = sext i32 [[ARG]] to i64
; CGSCC-NEXT:    [[CALL1:%.*]] = call noalias ptr @malloc(i64 [[CONV]])
; CGSCC-NEXT:    br label [[RETURN]]
; CGSCC:       return:
; CGSCC-NEXT:    [[RETVAL_0:%.*]] = phi ptr [ [[CALL]], [[IF_THEN]] ], [ null, [[IF_END]] ]
; CGSCC-NEXT:    ret ptr [[RETVAL_0]]
;
entry:
  %rem = srem i32 %arg, 2
  %cmp = icmp eq i32 %rem, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %div = sdiv i32 %arg, 2
  %call = call ptr @internal_only_rec(i32 %div)
  br label %return

if.end:                                           ; preds = %entry
  %conv = sext i32 %arg to i64
  %call1 = call ptr @malloc(i64 %conv)
  store i8 0, ptr %call1
  br label %return

return:                                           ; preds = %if.end, %if.then
  %retval.0 = phi ptr [ %call, %if.then ], [ null, %if.end ]
  ret ptr %retval.0
}

define dso_local ptr @internal_argmem_only_read(ptr %arg) {
; TUNIT: Function Attrs: memory(argmem: read, inaccessiblemem: readwrite)
; TUNIT-LABEL: define {{[^@]+}}@internal_argmem_only_read
; TUNIT-SAME: (ptr nocapture nofree noundef nonnull readonly align 4 dereferenceable(4) [[ARG:%.*]]) #[[ATTR2:[0-9]+]] {
; TUNIT-NEXT:  entry:
; TUNIT-NEXT:    [[TMP:%.*]] = load i32, ptr [[ARG]], align 4
; TUNIT-NEXT:    [[CONV:%.*]] = sext i32 [[TMP]] to i64
; TUNIT-NEXT:    [[CALL:%.*]] = call noalias ptr @malloc(i64 [[CONV]]) #[[ATTR0]]
; TUNIT-NEXT:    ret ptr [[CALL]]
;
; CGSCC: Function Attrs: memory(argmem: read, inaccessiblemem: readwrite)
; CGSCC-LABEL: define {{[^@]+}}@internal_argmem_only_read
; CGSCC-SAME: (ptr nocapture nofree noundef nonnull readonly align 4 dereferenceable(4) [[ARG:%.*]]) #[[ATTR2:[0-9]+]] {
; CGSCC-NEXT:  entry:
; CGSCC-NEXT:    [[TMP:%.*]] = load i32, ptr [[ARG]], align 4
; CGSCC-NEXT:    [[CONV:%.*]] = sext i32 [[TMP]] to i64
; CGSCC-NEXT:    [[CALL:%.*]] = call noalias ptr @malloc(i64 [[CONV]])
; CGSCC-NEXT:    ret ptr [[CALL]]
;
entry:
  %tmp = load i32, ptr %arg, align 4
  %conv = sext i32 %tmp to i64
  %call = call ptr @malloc(i64 %conv)
  ret ptr %call
}

define dso_local ptr @internal_argmem_only_write(ptr %arg) {
; TUNIT: Function Attrs: memory(argmem: write, inaccessiblemem: readwrite)
; TUNIT-LABEL: define {{[^@]+}}@internal_argmem_only_write
; TUNIT-SAME: (ptr nocapture nofree noundef nonnull writeonly align 4 dereferenceable(4) [[ARG:%.*]]) #[[ATTR3:[0-9]+]] {
; TUNIT-NEXT:  entry:
; TUNIT-NEXT:    store i32 10, ptr [[ARG]], align 4
; TUNIT-NEXT:    [[CALL:%.*]] = call noalias dereferenceable_or_null(10) ptr @malloc(i64 noundef 10) #[[ATTR0]]
; TUNIT-NEXT:    ret ptr [[CALL]]
;
; CGSCC: Function Attrs: memory(argmem: write, inaccessiblemem: readwrite)
; CGSCC-LABEL: define {{[^@]+}}@internal_argmem_only_write
; CGSCC-SAME: (ptr nocapture nofree noundef nonnull writeonly align 4 dereferenceable(4) [[ARG:%.*]]) #[[ATTR3:[0-9]+]] {
; CGSCC-NEXT:  entry:
; CGSCC-NEXT:    store i32 10, ptr [[ARG]], align 4
; CGSCC-NEXT:    [[CALL:%.*]] = call noalias dereferenceable_or_null(10) ptr @malloc(i64 noundef 10)
; CGSCC-NEXT:    ret ptr [[CALL]]
;
entry:
  store i32 10, ptr %arg, align 4
  %call = call dereferenceable_or_null(10) ptr @malloc(i64 10)
  ret ptr %call
}

define dso_local ptr @internal_argmem_only_rec(ptr %arg) {
; TUNIT: Function Attrs: memory(argmem: readwrite, inaccessiblemem: readwrite)
; TUNIT-LABEL: define {{[^@]+}}@internal_argmem_only_rec
; TUNIT-SAME: (ptr nocapture nofree [[ARG:%.*]]) #[[ATTR4:[0-9]+]] {
; TUNIT-NEXT:  entry:
; TUNIT-NEXT:    [[CALL:%.*]] = call noalias ptr @internal_argmem_only_rec_1(ptr nocapture nofree noundef align 4 [[ARG]]) #[[ATTR4]]
; TUNIT-NEXT:    ret ptr [[CALL]]
;
; CGSCC: Function Attrs: memory(argmem: readwrite, inaccessiblemem: readwrite)
; CGSCC-LABEL: define {{[^@]+}}@internal_argmem_only_rec
; CGSCC-SAME: (ptr nocapture nofree noundef nonnull align 4 dereferenceable(4) [[ARG:%.*]]) #[[ATTR4:[0-9]+]] {
; CGSCC-NEXT:  entry:
; CGSCC-NEXT:    [[CALL:%.*]] = call noalias ptr @internal_argmem_only_rec_1(ptr nocapture nofree noundef nonnull align 4 dereferenceable(4) [[ARG]]) #[[ATTR4]]
; CGSCC-NEXT:    ret ptr [[CALL]]
;
entry:
  %call = call ptr @internal_argmem_only_rec_1(ptr %arg)
  ret ptr %call
}

define internal ptr @internal_argmem_only_rec_1(ptr %arg) {
; TUNIT: Function Attrs: memory(argmem: readwrite, inaccessiblemem: readwrite)
; TUNIT-LABEL: define {{[^@]+}}@internal_argmem_only_rec_1
; TUNIT-SAME: (ptr nocapture nofree noundef nonnull align 4 dereferenceable(4) [[ARG:%.*]]) #[[ATTR4]] {
; TUNIT-NEXT:  entry:
; TUNIT-NEXT:    [[TMP:%.*]] = load i32, ptr [[ARG]], align 4
; TUNIT-NEXT:    [[CMP:%.*]] = icmp eq i32 [[TMP]], 0
; TUNIT-NEXT:    br i1 [[CMP]], label [[IF_THEN:%.*]], label [[IF_END:%.*]]
; TUNIT:       if.then:
; TUNIT-NEXT:    br label [[RETURN:%.*]]
; TUNIT:       if.end:
; TUNIT-NEXT:    [[TRUETMP1:%.*]] = load i32, ptr [[ARG]], align 4
; TUNIT-NEXT:    [[CMP1:%.*]] = icmp eq i32 [[TRUETMP1]], 1
; TUNIT-NEXT:    br i1 [[CMP1]], label [[IF_THEN2:%.*]], label [[IF_END3:%.*]]
; TUNIT:       if.then2:
; TUNIT-NEXT:    [[ADD_PTR:%.*]] = getelementptr inbounds i32, ptr [[ARG]], i64 -1
; TUNIT-NEXT:    [[CALL:%.*]] = call noalias ptr @internal_argmem_only_rec_2(ptr nocapture nofree noundef nonnull align 4 dereferenceable(4) [[ADD_PTR]]) #[[ATTR4]]
; TUNIT-NEXT:    br label [[RETURN]]
; TUNIT:       if.end3:
; TUNIT-NEXT:    [[TRUETMP2:%.*]] = load i32, ptr [[ARG]], align 4
; TUNIT-NEXT:    [[CONV:%.*]] = sext i32 [[TRUETMP2]] to i64
; TUNIT-NEXT:    [[CALL4:%.*]] = call noalias ptr @malloc(i64 [[CONV]]) #[[ATTR0]]
; TUNIT-NEXT:    br label [[RETURN]]
; TUNIT:       return:
; TUNIT-NEXT:    [[RETVAL_0:%.*]] = phi ptr [ null, [[IF_THEN]] ], [ [[CALL]], [[IF_THEN2]] ], [ [[CALL4]], [[IF_END3]] ]
; TUNIT-NEXT:    ret ptr [[RETVAL_0]]
;
; CGSCC: Function Attrs: memory(argmem: readwrite, inaccessiblemem: readwrite)
; CGSCC-LABEL: define {{[^@]+}}@internal_argmem_only_rec_1
; CGSCC-SAME: (ptr nocapture nofree noundef nonnull align 4 dereferenceable(4) [[ARG:%.*]]) #[[ATTR4]] {
; CGSCC-NEXT:  entry:
; CGSCC-NEXT:    [[TMP:%.*]] = load i32, ptr [[ARG]], align 4
; CGSCC-NEXT:    [[CMP:%.*]] = icmp eq i32 [[TMP]], 0
; CGSCC-NEXT:    br i1 [[CMP]], label [[IF_THEN:%.*]], label [[IF_END:%.*]]
; CGSCC:       if.then:
; CGSCC-NEXT:    br label [[RETURN:%.*]]
; CGSCC:       if.end:
; CGSCC-NEXT:    [[TRUETMP1:%.*]] = load i32, ptr [[ARG]], align 4
; CGSCC-NEXT:    [[CMP1:%.*]] = icmp eq i32 [[TRUETMP1]], 1
; CGSCC-NEXT:    br i1 [[CMP1]], label [[IF_THEN2:%.*]], label [[IF_END3:%.*]]
; CGSCC:       if.then2:
; CGSCC-NEXT:    [[ADD_PTR:%.*]] = getelementptr inbounds i32, ptr [[ARG]], i64 -1
; CGSCC-NEXT:    [[CALL:%.*]] = call noalias ptr @internal_argmem_only_rec_2(ptr nocapture nofree noundef nonnull align 4 dereferenceable(4) [[ADD_PTR]]) #[[ATTR4]]
; CGSCC-NEXT:    br label [[RETURN]]
; CGSCC:       if.end3:
; CGSCC-NEXT:    [[TRUETMP2:%.*]] = load i32, ptr [[ARG]], align 4
; CGSCC-NEXT:    [[CONV:%.*]] = sext i32 [[TRUETMP2]] to i64
; CGSCC-NEXT:    [[CALL4:%.*]] = call noalias ptr @malloc(i64 [[CONV]])
; CGSCC-NEXT:    br label [[RETURN]]
; CGSCC:       return:
; CGSCC-NEXT:    [[RETVAL_0:%.*]] = phi ptr [ null, [[IF_THEN]] ], [ [[CALL]], [[IF_THEN2]] ], [ [[CALL4]], [[IF_END3]] ]
; CGSCC-NEXT:    ret ptr [[RETVAL_0]]
;
entry:
  %tmp = load i32, ptr %arg, align 4
  %cmp = icmp eq i32 %tmp, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %tmp1 = load i32, ptr %arg, align 4
  %cmp1 = icmp eq i32 %tmp1, 1
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  %add.ptr = getelementptr inbounds i32, ptr %arg, i64 -1
  %call = call ptr @internal_argmem_only_rec_2(ptr nonnull %add.ptr)
  br label %return

if.end3:                                          ; preds = %if.end
  %tmp2 = load i32, ptr %arg, align 4
  %conv = sext i32 %tmp2 to i64
  %call4 = call ptr @malloc(i64 %conv)
  br label %return

return:                                           ; preds = %if.end3, %if.then2, %if.then
  %retval.0 = phi ptr [ null, %if.then ], [ %call, %if.then2 ], [ %call4, %if.end3 ]
  ret ptr %retval.0
}

define internal ptr @internal_argmem_only_rec_2(ptr %arg) {
; CHECK: Function Attrs: memory(argmem: readwrite, inaccessiblemem: readwrite)
; CHECK-LABEL: define {{[^@]+}}@internal_argmem_only_rec_2
; CHECK-SAME: (ptr nocapture nofree noundef nonnull align 4 dereferenceable(4) [[ARG:%.*]]) #[[ATTR4:[0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    store i32 0, ptr [[ARG]], align 4
; CHECK-NEXT:    [[ADD_PTR:%.*]] = getelementptr inbounds i32, ptr [[ARG]], i64 -1
; CHECK-NEXT:    [[CALL:%.*]] = call noalias ptr @internal_argmem_only_rec_1(ptr nocapture nofree noundef nonnull align 4 dereferenceable(4) [[ADD_PTR]]) #[[ATTR4]]
; CHECK-NEXT:    ret ptr [[CALL]]
;
entry:
  store i32 0, ptr %arg, align 4
  %add.ptr = getelementptr inbounds i32, ptr %arg, i64 -1
  %call = call ptr @internal_argmem_only_rec_1(ptr nonnull %add.ptr)
  ret ptr %call
}

declare ptr @unknown_ptr() readnone
declare ptr @argmem_only(ptr %arg) argmemonly
declare ptr @inaccesible_argmem_only_decl(ptr %arg) inaccessiblemem_or_argmemonly
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) nounwind argmemonly willreturn

define void @callerA1(ptr %arg) {
; CHECK: Function Attrs: memory(argmem: readwrite)
; CHECK-LABEL: define {{[^@]+}}@callerA1
; CHECK-SAME: (ptr [[ARG:%.*]]) #[[ATTR6:[0-9]+]] {
; CHECK-NEXT:    [[TMP1:%.*]] = call ptr @argmem_only(ptr [[ARG]]) #[[ATTR6]]
; CHECK-NEXT:    ret void
;
  call ptr @argmem_only(ptr %arg)
  ret void
}
define void @callerA2(ptr %arg) {
; CHECK: Function Attrs: memory(argmem: readwrite, inaccessiblemem: readwrite)
; CHECK-LABEL: define {{[^@]+}}@callerA2
; CHECK-SAME: (ptr [[ARG:%.*]]) #[[ATTR4]] {
; CHECK-NEXT:    [[TMP1:%.*]] = call ptr @inaccesible_argmem_only_decl(ptr [[ARG]]) #[[ATTR4]]
; CHECK-NEXT:    ret void
;
  call ptr @inaccesible_argmem_only_decl(ptr %arg)
  ret void
}
define void @callerB1() {
; CHECK: Function Attrs: memory(none)
; CHECK-LABEL: define {{[^@]+}}@callerB1
; CHECK-SAME: () #[[ATTR5:[0-9]+]] {
; CHECK-NEXT:    [[STACK:%.*]] = alloca i8, align 1
; CHECK-NEXT:    [[TMP1:%.*]] = call ptr @argmem_only(ptr noundef nonnull dereferenceable(1) [[STACK]]) #[[ATTR6]]
; CHECK-NEXT:    ret void
;
  %stack = alloca i8
  call ptr @argmem_only(ptr %stack)
  ret void
}
define void @callerB2() {
; CHECK: Function Attrs: memory(inaccessiblemem: readwrite)
; CHECK-LABEL: define {{[^@]+}}@callerB2
; CHECK-SAME: () #[[ATTR0:[0-9]+]] {
; CHECK-NEXT:    [[STACK:%.*]] = alloca i8, align 1
; CHECK-NEXT:    [[TMP1:%.*]] = call ptr @inaccesible_argmem_only_decl(ptr noundef nonnull dereferenceable(1) [[STACK]]) #[[ATTR4]]
; CHECK-NEXT:    ret void
;
  %stack = alloca i8
  call ptr @inaccesible_argmem_only_decl(ptr %stack)
  ret void
}
define void @callerC1() {
; CHECK: Function Attrs: memory(readwrite, inaccessiblemem: none)
; CHECK-LABEL: define {{[^@]+}}@callerC1
; CHECK-SAME: () #[[ATTR8:[0-9]+]] {
; CHECK-NEXT:    [[UNKNOWN:%.*]] = call ptr @unknown_ptr()
; CHECK-NEXT:    [[TMP1:%.*]] = call ptr @argmem_only(ptr [[UNKNOWN]]) #[[ATTR6]]
; CHECK-NEXT:    ret void
;
  %unknown = call ptr @unknown_ptr()
  call ptr @argmem_only(ptr %unknown)
  ret void
}
define void @callerC2() {
; CHECK-LABEL: define {{[^@]+}}@callerC2() {
; CHECK-NEXT:    [[UNKNOWN:%.*]] = call ptr @unknown_ptr()
; CHECK-NEXT:    [[TMP1:%.*]] = call ptr @inaccesible_argmem_only_decl(ptr [[UNKNOWN]]) #[[ATTR4]]
; CHECK-NEXT:    ret void
;
  %unknown = call ptr @unknown_ptr()
  call ptr @inaccesible_argmem_only_decl(ptr %unknown)
  ret void
}
define void @callerD1() {
; TUNIT: Function Attrs: memory(write, inaccessiblemem: none)
; TUNIT-LABEL: define {{[^@]+}}@callerD1
; TUNIT-SAME: () #[[ATTR9:[0-9]+]] {
; TUNIT-NEXT:    [[UNKNOWN:%.*]] = call ptr @argmem_only(ptr noundef align 4294967296 null) #[[ATTR6]]
; TUNIT-NEXT:    store i8 0, ptr [[UNKNOWN]], align 1
; TUNIT-NEXT:    ret void
;
; CGSCC: Function Attrs: memory(write, inaccessiblemem: none)
; CGSCC-LABEL: define {{[^@]+}}@callerD1
; CGSCC-SAME: () #[[ATTR9:[0-9]+]] {
; CGSCC-NEXT:    [[UNKNOWN:%.*]] = call ptr @argmem_only(ptr noundef align 4294967296 null)
; CGSCC-NEXT:    store i8 0, ptr [[UNKNOWN]], align 1
; CGSCC-NEXT:    ret void
;
  %unknown = call ptr @argmem_only(ptr null)
  store i8 0, ptr %unknown
  ret void
}
define void @callerD2() {
; TUNIT: Function Attrs: memory(write, inaccessiblemem: readwrite)
; TUNIT-LABEL: define {{[^@]+}}@callerD2
; TUNIT-SAME: () #[[ATTR1]] {
; TUNIT-NEXT:    [[UNKNOWN:%.*]] = call ptr @inaccesible_argmem_only_decl(ptr noundef align 4294967296 null) #[[ATTR4]]
; TUNIT-NEXT:    store i8 0, ptr [[UNKNOWN]], align 1
; TUNIT-NEXT:    ret void
;
; CGSCC: Function Attrs: memory(write, inaccessiblemem: readwrite)
; CGSCC-LABEL: define {{[^@]+}}@callerD2
; CGSCC-SAME: () #[[ATTR1]] {
; CGSCC-NEXT:    [[UNKNOWN:%.*]] = call ptr @inaccesible_argmem_only_decl(ptr noundef align 4294967296 null)
; CGSCC-NEXT:    store i8 0, ptr [[UNKNOWN]], align 1
; CGSCC-NEXT:    ret void
;
  %unknown = call ptr @inaccesible_argmem_only_decl(ptr null)
  store i8 0, ptr %unknown
  ret void
}

define void @callerE(ptr %arg) {
; CHECK: Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
; CHECK-LABEL: define {{[^@]+}}@callerE
; CHECK-SAME: (ptr nocapture nofree readnone [[ARG:%.*]]) #[[ATTR10:[0-9]+]] {
; CHECK-NEXT:    ret void
;
  call void @llvm.lifetime.start.p0(i64 4, ptr %arg)
  ret void
}


define void @write_global() {
; CHECK: Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(write, inaccessiblemem: none)
; CHECK-LABEL: define {{[^@]+}}@write_global
; CHECK-SAME: () #[[ATTR11:[0-9]+]] {
; CHECK-NEXT:    store i32 0, ptr @G, align 4
; CHECK-NEXT:    ret void
;
  store i32 0, ptr @G, align 4
  ret void
}
define void @write_global_via_arg(ptr %GPtr) {
; CHECK: Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
; CHECK-LABEL: define {{[^@]+}}@write_global_via_arg
; CHECK-SAME: (ptr nocapture nofree noundef nonnull writeonly align 4 dereferenceable(4) [[GPTR:%.*]]) #[[ATTR12:[0-9]+]] {
; CHECK-NEXT:    store i32 0, ptr [[GPTR]], align 4
; CHECK-NEXT:    ret void
;
  store i32 0, ptr %GPtr, align 4
  ret void
}
define internal void @write_global_via_arg_internal(ptr %GPtr) {
; CHECK: Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(write, argmem: none, inaccessiblemem: none)
; CHECK-LABEL: define {{[^@]+}}@write_global_via_arg_internal
; CHECK-SAME: () #[[ATTR13:[0-9]+]] {
; CHECK-NEXT:    store i32 0, ptr @G, align 4
; CHECK-NEXT:    ret void
;
  store i32 0, ptr %GPtr, align 4
  ret void
}

define void @writeonly_global() {
; TUNIT: Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(write, inaccessiblemem: none)
; TUNIT-LABEL: define {{[^@]+}}@writeonly_global
; TUNIT-SAME: () #[[ATTR11]] {
; TUNIT-NEXT:    call void @write_global() #[[ATTR17:[0-9]+]]
; TUNIT-NEXT:    ret void
;
; CGSCC: Function Attrs: mustprogress nofree nosync nounwind willreturn memory(write, inaccessiblemem: none)
; CGSCC-LABEL: define {{[^@]+}}@writeonly_global
; CGSCC-SAME: () #[[ATTR14:[0-9]+]] {
; CGSCC-NEXT:    call void @write_global() #[[ATTR19:[0-9]+]]
; CGSCC-NEXT:    ret void
;
  call void @write_global()
  ret void
}
define void @writeonly_global_via_arg() {
; TUNIT: Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(write, inaccessiblemem: none)
; TUNIT-LABEL: define {{[^@]+}}@writeonly_global_via_arg
; TUNIT-SAME: () #[[ATTR11]] {
; TUNIT-NEXT:    call void @write_global_via_arg(ptr nocapture nofree noundef nonnull writeonly align 4 dereferenceable(4) @G) #[[ATTR18:[0-9]+]]
; TUNIT-NEXT:    ret void
;
; CGSCC: Function Attrs: mustprogress nofree nosync nounwind willreturn memory(write, inaccessiblemem: none)
; CGSCC-LABEL: define {{[^@]+}}@writeonly_global_via_arg
; CGSCC-SAME: () #[[ATTR14]] {
; CGSCC-NEXT:    call void @write_global_via_arg(ptr nocapture nofree noundef nonnull writeonly align 4 dereferenceable(4) @G) #[[ATTR20:[0-9]+]]
; CGSCC-NEXT:    ret void
;
  call void @write_global_via_arg(ptr @G)
  ret void
}

define void @writeonly_global_via_arg_internal() {
;
; TUNIT: Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(write, inaccessiblemem: none)
; TUNIT-LABEL: define {{[^@]+}}@writeonly_global_via_arg_internal
; TUNIT-SAME: () #[[ATTR11]] {
; TUNIT-NEXT:    call void @write_global_via_arg_internal() #[[ATTR19:[0-9]+]]
; TUNIT-NEXT:    ret void
;
; CGSCC: Function Attrs: mustprogress nofree nosync nounwind willreturn memory(write, inaccessiblemem: none)
; CGSCC-LABEL: define {{[^@]+}}@writeonly_global_via_arg_internal
; CGSCC-SAME: () #[[ATTR14]] {
; CGSCC-NEXT:    call void @write_global_via_arg_internal() #[[ATTR19]]
; CGSCC-NEXT:    ret void
;
  call void @write_global_via_arg_internal(ptr @G)
  ret void
}

define i8 @recursive_not_readnone(ptr %ptr, i1 %c) {
; TUNIT: Function Attrs: nofree nosync nounwind memory(argmem: write)
; TUNIT-LABEL: define {{[^@]+}}@recursive_not_readnone
; TUNIT-SAME: (ptr nocapture nofree writeonly [[PTR:%.*]], i1 noundef [[C:%.*]]) #[[ATTR14:[0-9]+]] {
; TUNIT-NEXT:    [[ALLOC:%.*]] = alloca i8, align 1
; TUNIT-NEXT:    br i1 [[C]], label [[T:%.*]], label [[F:%.*]]
; TUNIT:       t:
; TUNIT-NEXT:    [[TMP1:%.*]] = call i8 @recursive_not_readnone(ptr noalias nocapture nofree noundef nonnull writeonly dereferenceable(1) [[ALLOC]], i1 noundef false) #[[ATTR14]]
; TUNIT-NEXT:    ret i8 1
; TUNIT:       f:
; TUNIT-NEXT:    store i8 1, ptr [[PTR]], align 1
; TUNIT-NEXT:    ret i8 0
;
; CGSCC: Function Attrs: nofree nosync nounwind memory(argmem: write)
; CGSCC-LABEL: define {{[^@]+}}@recursive_not_readnone
; CGSCC-SAME: (ptr nocapture nofree writeonly [[PTR:%.*]], i1 noundef [[C:%.*]]) #[[ATTR15:[0-9]+]] {
; CGSCC-NEXT:    [[ALLOC:%.*]] = alloca i8, align 1
; CGSCC-NEXT:    br i1 [[C]], label [[T:%.*]], label [[F:%.*]]
; CGSCC:       t:
; CGSCC-NEXT:    [[TMP1:%.*]] = call i8 @recursive_not_readnone(ptr noalias nocapture nofree noundef nonnull writeonly dereferenceable(1) [[ALLOC]], i1 noundef false) #[[ATTR15]]
; CGSCC-NEXT:    ret i8 1
; CGSCC:       f:
; CGSCC-NEXT:    store i8 1, ptr [[PTR]], align 1
; CGSCC-NEXT:    ret i8 0
;
  %alloc = alloca i8
  br i1 %c, label %t, label %f
t:
  call i8 @recursive_not_readnone(ptr %alloc, i1 false)
  %r = load i8, ptr %alloc
  ret i8 %r
f:
  store i8 1, ptr %ptr
  ret i8 0
}

define internal i8 @recursive_not_readnone_internal(ptr %ptr, i1 %c) {
; TUNIT: Function Attrs: nofree nosync nounwind memory(argmem: write)
; TUNIT-LABEL: define {{[^@]+}}@recursive_not_readnone_internal
; TUNIT-SAME: (ptr noalias nocapture nofree noundef nonnull writeonly dereferenceable(1) [[PTR:%.*]], i1 noundef [[C:%.*]]) #[[ATTR14]] {
; TUNIT-NEXT:    [[ALLOC:%.*]] = alloca i8, align 1
; TUNIT-NEXT:    br i1 [[C]], label [[T:%.*]], label [[F:%.*]]
; TUNIT:       t:
; TUNIT-NEXT:    [[TMP1:%.*]] = call i8 @recursive_not_readnone_internal(ptr noalias nocapture nofree noundef nonnull writeonly dereferenceable(1) [[ALLOC]], i1 noundef false) #[[ATTR14]]
; TUNIT-NEXT:    ret i8 1
; TUNIT:       f:
; TUNIT-NEXT:    store i8 1, ptr [[PTR]], align 1
; TUNIT-NEXT:    ret i8 0
;
; CGSCC: Function Attrs: nofree nosync nounwind memory(argmem: write)
; CGSCC-LABEL: define {{[^@]+}}@recursive_not_readnone_internal
; CGSCC-SAME: (ptr noalias nocapture nofree noundef nonnull writeonly dereferenceable(1) [[PTR:%.*]], i1 noundef [[C:%.*]]) #[[ATTR15]] {
; CGSCC-NEXT:    [[ALLOC:%.*]] = alloca i8, align 1
; CGSCC-NEXT:    br i1 [[C]], label [[T:%.*]], label [[F:%.*]]
; CGSCC:       t:
; CGSCC-NEXT:    [[TMP1:%.*]] = call i8 @recursive_not_readnone_internal(ptr noalias nocapture nofree noundef nonnull writeonly dereferenceable(1) [[ALLOC]], i1 noundef false) #[[ATTR15]]
; CGSCC-NEXT:    ret i8 1
; CGSCC:       f:
; CGSCC-NEXT:    store i8 1, ptr [[PTR]], align 1
; CGSCC-NEXT:    ret i8 0
;
  %alloc = alloca i8
  br i1 %c, label %t, label %f
t:
  call i8 @recursive_not_readnone_internal(ptr %alloc, i1 false)
  %r = load i8, ptr %alloc
  ret i8 %r
f:
  store i8 1, ptr %ptr
  ret i8 0
}

define i8 @readnone_caller(i1 %c) {
; TUNIT: Function Attrs: nofree norecurse nosync nounwind memory(none)
; TUNIT-LABEL: define {{[^@]+}}@readnone_caller
; TUNIT-SAME: (i1 [[C:%.*]]) #[[ATTR15:[0-9]+]] {
; TUNIT-NEXT:    [[A:%.*]] = alloca i8, align 1
; TUNIT-NEXT:    [[R:%.*]] = call i8 @recursive_not_readnone_internal(ptr noalias nocapture nofree noundef nonnull writeonly dereferenceable(1) [[A]], i1 noundef [[C]]) #[[ATTR14]]
; TUNIT-NEXT:    ret i8 [[R]]
;
; CGSCC: Function Attrs: nofree nosync nounwind memory(none)
; CGSCC-LABEL: define {{[^@]+}}@readnone_caller
; CGSCC-SAME: (i1 noundef [[C:%.*]]) #[[ATTR16:[0-9]+]] {
; CGSCC-NEXT:    [[A:%.*]] = alloca i8, align 1
; CGSCC-NEXT:    [[R:%.*]] = call i8 @recursive_not_readnone_internal(ptr noalias nocapture nofree noundef nonnull writeonly dereferenceable(1) [[A]], i1 noundef [[C]]) #[[ATTR21:[0-9]+]]
; CGSCC-NEXT:    ret i8 [[R]]
;
  %a = alloca i8
  %r = call i8 @recursive_not_readnone_internal(ptr %a, i1 %c)
  ret i8 %r
}

define internal i8 @recursive_readnone_internal2(ptr %ptr, i1 %c) {
; TUNIT: Function Attrs: nofree nosync nounwind memory(argmem: write)
; TUNIT-LABEL: define {{[^@]+}}@recursive_readnone_internal2
; TUNIT-SAME: (ptr noalias nocapture nofree writeonly [[PTR:%.*]], i1 noundef [[C:%.*]]) #[[ATTR14]] {
; TUNIT-NEXT:    [[ALLOC:%.*]] = alloca i8, align 1
; TUNIT-NEXT:    br i1 [[C]], label [[T:%.*]], label [[F:%.*]]
; TUNIT:       t:
; TUNIT-NEXT:    [[TMP1:%.*]] = call i8 @recursive_readnone_internal2(ptr noalias nocapture nofree noundef nonnull writeonly dereferenceable(1) [[ALLOC]], i1 noundef false) #[[ATTR14]]
; TUNIT-NEXT:    ret i8 1
; TUNIT:       f:
; TUNIT-NEXT:    store i8 1, ptr [[PTR]], align 1
; TUNIT-NEXT:    ret i8 0
;
; CGSCC: Function Attrs: nofree nosync nounwind memory(argmem: write)
; CGSCC-LABEL: define {{[^@]+}}@recursive_readnone_internal2
; CGSCC-SAME: (ptr noalias nocapture nofree writeonly [[PTR:%.*]], i1 noundef [[C:%.*]]) #[[ATTR15]] {
; CGSCC-NEXT:    [[ALLOC:%.*]] = alloca i8, align 1
; CGSCC-NEXT:    br i1 [[C]], label [[T:%.*]], label [[F:%.*]]
; CGSCC:       t:
; CGSCC-NEXT:    [[TMP1:%.*]] = call i8 @recursive_readnone_internal2(ptr noalias nocapture nofree noundef nonnull writeonly dereferenceable(1) [[ALLOC]], i1 noundef false) #[[ATTR15]]
; CGSCC-NEXT:    ret i8 1
; CGSCC:       f:
; CGSCC-NEXT:    store i8 1, ptr [[PTR]], align 1
; CGSCC-NEXT:    ret i8 0
;
  %alloc = alloca i8
  br i1 %c, label %t, label %f
t:
  call i8 @recursive_readnone_internal2(ptr %alloc, i1 false)
  %r = load i8, ptr %alloc
  ret i8 %r
f:
  store i8 1, ptr %ptr
  ret i8 0
}

define i8 @readnone_caller2(i1 %c) {
; TUNIT: Function Attrs: nofree norecurse nosync nounwind memory(none)
; TUNIT-LABEL: define {{[^@]+}}@readnone_caller2
; TUNIT-SAME: (i1 [[C:%.*]]) #[[ATTR15]] {
; TUNIT-NEXT:    [[R:%.*]] = call i8 @recursive_readnone_internal2(ptr writeonly undef, i1 noundef [[C]]) #[[ATTR14]]
; TUNIT-NEXT:    ret i8 [[R]]
;
; CGSCC: Function Attrs: nofree nosync nounwind memory(none)
; CGSCC-LABEL: define {{[^@]+}}@readnone_caller2
; CGSCC-SAME: (i1 noundef [[C:%.*]]) #[[ATTR16]] {
; CGSCC-NEXT:    [[R:%.*]] = call i8 @recursive_readnone_internal2(ptr nofree writeonly undef, i1 noundef [[C]]) #[[ATTR21]]
; CGSCC-NEXT:    ret i8 [[R]]
;
  %r = call i8 @recursive_readnone_internal2(ptr undef, i1 %c)
  ret i8 %r
}

define internal i8 @recursive_not_readnone_internal3(ptr %ptr, i1 %c) {
; TUNIT: Function Attrs: nofree nosync nounwind memory(argmem: write)
; TUNIT-LABEL: define {{[^@]+}}@recursive_not_readnone_internal3
; TUNIT-SAME: (ptr noalias nocapture nofree noundef nonnull writeonly dereferenceable(1) [[PTR:%.*]], i1 noundef [[C:%.*]]) #[[ATTR14]] {
; TUNIT-NEXT:    [[ALLOC:%.*]] = alloca i8, align 1
; TUNIT-NEXT:    br i1 [[C]], label [[T:%.*]], label [[F:%.*]]
; TUNIT:       t:
; TUNIT-NEXT:    [[TMP1:%.*]] = call i8 @recursive_not_readnone_internal3(ptr noalias nocapture nofree noundef nonnull writeonly dereferenceable(1) [[ALLOC]], i1 noundef false) #[[ATTR14]]
; TUNIT-NEXT:    ret i8 1
; TUNIT:       f:
; TUNIT-NEXT:    store i8 1, ptr [[PTR]], align 1
; TUNIT-NEXT:    ret i8 0
;
; CGSCC: Function Attrs: nofree nosync nounwind memory(argmem: write)
; CGSCC-LABEL: define {{[^@]+}}@recursive_not_readnone_internal3
; CGSCC-SAME: (ptr noalias nocapture nofree noundef nonnull writeonly dereferenceable(1) [[PTR:%.*]], i1 noundef [[C:%.*]]) #[[ATTR15]] {
; CGSCC-NEXT:    [[ALLOC:%.*]] = alloca i8, align 1
; CGSCC-NEXT:    br i1 [[C]], label [[T:%.*]], label [[F:%.*]]
; CGSCC:       t:
; CGSCC-NEXT:    [[TMP1:%.*]] = call i8 @recursive_not_readnone_internal3(ptr noalias nocapture nofree noundef nonnull writeonly dereferenceable(1) [[ALLOC]], i1 noundef false) #[[ATTR15]]
; CGSCC-NEXT:    ret i8 1
; CGSCC:       f:
; CGSCC-NEXT:    store i8 1, ptr [[PTR]], align 1
; CGSCC-NEXT:    ret i8 0
;
  %alloc = alloca i8
  br i1 %c, label %t, label %f
t:
  call i8 @recursive_not_readnone_internal3(ptr %alloc, i1 false)
  %r = load i8, ptr %alloc
  ret i8 %r
f:
  store i8 1, ptr %ptr
  ret i8 0
}

define i8 @readnone_caller3(i1 %c) {
; TUNIT: Function Attrs: nofree norecurse nosync nounwind memory(none)
; TUNIT-LABEL: define {{[^@]+}}@readnone_caller3
; TUNIT-SAME: (i1 [[C:%.*]]) #[[ATTR15]] {
; TUNIT-NEXT:    [[ALLOC:%.*]] = alloca i8, align 1
; TUNIT-NEXT:    [[R:%.*]] = call i8 @recursive_not_readnone_internal3(ptr noalias nocapture nofree noundef nonnull writeonly dereferenceable(1) [[ALLOC]], i1 noundef [[C]]) #[[ATTR14]]
; TUNIT-NEXT:    ret i8 [[R]]
;
; CGSCC: Function Attrs: nofree nosync nounwind memory(none)
; CGSCC-LABEL: define {{[^@]+}}@readnone_caller3
; CGSCC-SAME: (i1 noundef [[C:%.*]]) #[[ATTR16]] {
; CGSCC-NEXT:    [[ALLOC:%.*]] = alloca i8, align 1
; CGSCC-NEXT:    [[R:%.*]] = call i8 @recursive_not_readnone_internal3(ptr noalias nocapture nofree noundef nonnull writeonly dereferenceable(1) [[ALLOC]], i1 noundef [[C]]) #[[ATTR21]]
; CGSCC-NEXT:    ret i8 [[R]]
;
  %alloc = alloca i8
  %r = call i8 @recursive_not_readnone_internal3(ptr %alloc, i1 %c)
  ret i8 %r
}

define internal void @argmemonly_before_ipconstprop(ptr %p) argmemonly {
; CGSCC: Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
; CGSCC-LABEL: define {{[^@]+}}@argmemonly_before_ipconstprop
; CGSCC-SAME: () #[[ATTR10]] {
; CGSCC-NEXT:    store i32 0, ptr @G, align 4
; CGSCC-NEXT:    ret void
;
  store i32 0, ptr %p
  ret void
}

define void @argmemonly_caller() {
; TUNIT: Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
; TUNIT-LABEL: define {{[^@]+}}@argmemonly_caller
; TUNIT-SAME: () #[[ATTR10]] {
; TUNIT-NEXT:    ret void
;
; CGSCC: Function Attrs: mustprogress nofree nosync nounwind willreturn memory(none)
; CGSCC-LABEL: define {{[^@]+}}@argmemonly_caller
; CGSCC-SAME: () #[[ATTR17:[0-9]+]] {
; CGSCC-NEXT:    ret void
;
  call void @argmemonly_before_ipconstprop(ptr @G)
  ret void
}

declare ptr @no_mem_unknown_ptr(ptr %arg) memory(none)

define void @argmem_and_unknown(i1 %c, ptr %arg) memory(argmem: readwrite) {
; TUNIT: Function Attrs: nosync memory(argmem: write)
; TUNIT-LABEL: define {{[^@]+}}@argmem_and_unknown
; TUNIT-SAME: (i1 noundef [[C:%.*]], ptr writeonly [[ARG:%.*]]) #[[ATTR16:[0-9]+]] {
; TUNIT-NEXT:    br i1 [[C]], label [[T:%.*]], label [[F:%.*]]
; TUNIT:       t:
; TUNIT-NEXT:    [[P:%.*]] = call ptr @no_mem_unknown_ptr(ptr noalias readnone [[ARG]]) #[[ATTR5]]
; TUNIT-NEXT:    store i32 0, ptr [[P]], align 4
; TUNIT-NEXT:    br label [[F]]
; TUNIT:       f:
; TUNIT-NEXT:    ret void
;
; CGSCC: Function Attrs: nosync memory(argmem: write)
; CGSCC-LABEL: define {{[^@]+}}@argmem_and_unknown
; CGSCC-SAME: (i1 noundef [[C:%.*]], ptr writeonly [[ARG:%.*]]) #[[ATTR18:[0-9]+]] {
; CGSCC-NEXT:    br i1 [[C]], label [[T:%.*]], label [[F:%.*]]
; CGSCC:       t:
; CGSCC-NEXT:    [[P:%.*]] = call ptr @no_mem_unknown_ptr(ptr noalias readnone [[ARG]]) #[[ATTR5]]
; CGSCC-NEXT:    store i32 0, ptr [[P]], align 4
; CGSCC-NEXT:    br label [[F]]
; CGSCC:       f:
; CGSCC-NEXT:    ret void
;
  br i1 %c, label %t, label %f
t:
  %p = call ptr @no_mem_unknown_ptr(ptr %arg)
  store i32 0, ptr %p
  br label %f
f:
  ret void
}

define i32 @readnone_args(ptr readonly) memory(inaccessiblemem: readwrite) {
; CHECK: Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
; CHECK-LABEL: define {{[^@]+}}@readnone_args
; CHECK-SAME: (ptr nocapture nofree noundef nonnull readnone align 4 dereferenceable(4) [[TMP0:%.*]]) #[[ATTR10]] {
; CHECK-NEXT:    [[L:%.*]] = load i32, ptr [[TMP0]], align 4
; CHECK-NEXT:    ret i32 [[L]]
;
  %l = load i32, ptr %0
  ret i32 %l
}

;.
; TUNIT: attributes #[[ATTR0]] = { memory(inaccessiblemem: readwrite) }
; TUNIT: attributes #[[ATTR1]] = { memory(write, inaccessiblemem: readwrite) }
; TUNIT: attributes #[[ATTR2]] = { memory(argmem: read, inaccessiblemem: readwrite) }
; TUNIT: attributes #[[ATTR3]] = { memory(argmem: write, inaccessiblemem: readwrite) }
; TUNIT: attributes #[[ATTR4]] = { memory(argmem: readwrite, inaccessiblemem: readwrite) }
; TUNIT: attributes #[[ATTR5]] = { memory(none) }
; TUNIT: attributes #[[ATTR6]] = { memory(argmem: readwrite) }
; TUNIT: attributes #[[ATTR7:[0-9]+]] = { nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
; TUNIT: attributes #[[ATTR8]] = { memory(readwrite, inaccessiblemem: none) }
; TUNIT: attributes #[[ATTR9]] = { memory(write, inaccessiblemem: none) }
; TUNIT: attributes #[[ATTR10]] = { mustprogress nofree norecurse nosync nounwind willreturn memory(none) }
; TUNIT: attributes #[[ATTR11]] = { mustprogress nofree norecurse nosync nounwind willreturn memory(write, inaccessiblemem: none) }
; TUNIT: attributes #[[ATTR12]] = { mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write) }
; TUNIT: attributes #[[ATTR13]] = { mustprogress nofree norecurse nosync nounwind willreturn memory(write, argmem: none, inaccessiblemem: none) }
; TUNIT: attributes #[[ATTR14]] = { nofree nosync nounwind memory(argmem: write) }
; TUNIT: attributes #[[ATTR15]] = { nofree norecurse nosync nounwind memory(none) }
; TUNIT: attributes #[[ATTR16]] = { nosync memory(argmem: write) }
; TUNIT: attributes #[[ATTR17]] = { nofree nosync nounwind willreturn memory(write, inaccessiblemem: none) }
; TUNIT: attributes #[[ATTR18]] = { nofree nosync nounwind willreturn memory(argmem: write) }
; TUNIT: attributes #[[ATTR19]] = { nofree nosync nounwind willreturn memory(write, argmem: none, inaccessiblemem: none) }
;.
; CGSCC: attributes #[[ATTR0]] = { memory(inaccessiblemem: readwrite) }
; CGSCC: attributes #[[ATTR1]] = { memory(write, inaccessiblemem: readwrite) }
; CGSCC: attributes #[[ATTR2]] = { memory(argmem: read, inaccessiblemem: readwrite) }
; CGSCC: attributes #[[ATTR3]] = { memory(argmem: write, inaccessiblemem: readwrite) }
; CGSCC: attributes #[[ATTR4]] = { memory(argmem: readwrite, inaccessiblemem: readwrite) }
; CGSCC: attributes #[[ATTR5]] = { memory(none) }
; CGSCC: attributes #[[ATTR6]] = { memory(argmem: readwrite) }
; CGSCC: attributes #[[ATTR7:[0-9]+]] = { nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
; CGSCC: attributes #[[ATTR8]] = { memory(readwrite, inaccessiblemem: none) }
; CGSCC: attributes #[[ATTR9]] = { memory(write, inaccessiblemem: none) }
; CGSCC: attributes #[[ATTR10]] = { mustprogress nofree norecurse nosync nounwind willreturn memory(none) }
; CGSCC: attributes #[[ATTR11]] = { mustprogress nofree norecurse nosync nounwind willreturn memory(write, inaccessiblemem: none) }
; CGSCC: attributes #[[ATTR12]] = { mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write) }
; CGSCC: attributes #[[ATTR13]] = { mustprogress nofree norecurse nosync nounwind willreturn memory(write, argmem: none, inaccessiblemem: none) }
; CGSCC: attributes #[[ATTR14]] = { mustprogress nofree nosync nounwind willreturn memory(write, inaccessiblemem: none) }
; CGSCC: attributes #[[ATTR15]] = { nofree nosync nounwind memory(argmem: write) }
; CGSCC: attributes #[[ATTR16]] = { nofree nosync nounwind memory(none) }
; CGSCC: attributes #[[ATTR17]] = { mustprogress nofree nosync nounwind willreturn memory(none) }
; CGSCC: attributes #[[ATTR18]] = { nosync memory(argmem: write) }
; CGSCC: attributes #[[ATTR19]] = { nofree nounwind willreturn memory(write, inaccessiblemem: none) }
; CGSCC: attributes #[[ATTR20]] = { nofree nounwind willreturn memory(argmem: write) }
; CGSCC: attributes #[[ATTR21]] = { nofree nounwind memory(argmem: write) }
;.
