; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --function-signature --scrub-attributes --check-attributes --check-globals
; RUN: opt -passes=openmp-opt -openmp-opt-disable-spmdization -S < %s | FileCheck %s --check-prefixes=CHECK

%"struct.ompx::state::TeamStateTy" = type { %"struct.ompx::state::ICVStateTy", i32, i32, ptr }
%"struct.ompx::state::ICVStateTy" = type { i32, i32, i32, i32, i32, i32 }

@_ZN4ompx5state9TeamStateE = external addrspace(3) global %"struct.ompx::state::TeamStateTy"
@_ZL29SharedMemVariableSharingSpace = external addrspace(3) global [64 x ptr]
@_ZL32SharedMemVariableSharingSpacePtr = internal addrspace(3) global ptr undef

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.amdgcn.workitem.id.x() #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare align 4 ptr addrspace(4) @llvm.amdgcn.dispatch.ptr() #0

; Function Attrs: convergent nounwind
;.
; CHECK: @[[_ZN4OMPX5STATE9TEAMSTATEE:[a-zA-Z0-9_$"\\.-]+]] = external addrspace(3) global %"struct.ompx::state::TeamStateTy"
; CHECK: @[[_ZL29SHAREDMEMVARIABLESHARINGSPACE:[a-zA-Z0-9_$"\\.-]+]] = external addrspace(3) global [64 x ptr]
; CHECK: @[[_ZL32SHAREDMEMVARIABLESHARINGSPACEPTR:[a-zA-Z0-9_$"\\.-]+]] = internal addrspace(3) global ptr undef
; CHECK: @[[__OMP_OFFLOADING_16_1BABDBD2_MAIN_L44_NESTED_PARALLELISM:[a-zA-Z0-9_$"\\.-]+]] = weak constant i8 0
;.
define internal noundef i32 @__kmpc_target_init(ptr nocapture nofree noundef readnone %0, i8 noundef signext %1, i1 noundef zeroext %2) #1 {
; CHECK: Function Attrs: convergent nosync nounwind memory(none)
; CHECK-LABEL: define {{[^@]+}}@__kmpc_target_init
; CHECK-SAME: (ptr nocapture nofree noundef readnone [[TMP0:%.*]], i8 noundef signext [[TMP1:%.*]], i1 noundef zeroext [[TMP2:%.*]]) #[[ATTR1:[0-9]+]] {
; CHECK-NEXT:  common.ret:
; CHECK-NEXT:    [[TMP3:%.*]] = tail call i32 @llvm.amdgcn.workitem.id.x()
; CHECK-NEXT:    [[TMP4:%.*]] = icmp eq i32 [[TMP3]], 0
; CHECK-NEXT:    [[DOT:%.*]] = select i1 [[TMP4]], i32 -1, i32 0
; CHECK-NEXT:    ret i32 [[DOT]]
;
common.ret:
  %3 = tail call i32 @llvm.amdgcn.workitem.id.x() #7
  %4 = icmp eq i32 %3, 0
  %. = select i1 %4, i32 -1, i32 0
  ret i32 %.
}

; Function Attrs: convergent nocallback nofree nounwind willreturn
declare void @llvm.amdgcn.s.barrier() #2

; Function Attrs: nounwind
define internal zeroext i1 @__kmpc_kernel_parallel(ptr nocapture nofree noundef writeonly %0) #3 {
; CHECK: Function Attrs: nounwind
; CHECK-LABEL: define {{[^@]+}}@__kmpc_kernel_parallel
; CHECK-SAME: (ptr nocapture nofree noundef writeonly [[TMP0:%.*]]) #[[ATTR3:[0-9]+]] {
; CHECK-NEXT:    [[TMP2:%.*]] = load ptr, ptr addrspace(3) getelementptr inbounds (%"struct.ompx::state::TeamStateTy", ptr addrspace(3) @_ZN4ompx5state9TeamStateE, i32 0, i32 3), align 8
; CHECK-NEXT:    store ptr [[TMP2]], ptr [[TMP0]], align 8
; CHECK-NEXT:    [[TMP3:%.*]] = load i32, ptr addrspace(3) getelementptr inbounds (%"struct.ompx::state::TeamStateTy", ptr addrspace(3) @_ZN4ompx5state9TeamStateE, i32 0, i32 1), align 8
; CHECK-NEXT:    [[TMP4:%.*]] = icmp ne i32 [[TMP3]], 0
; CHECK-NEXT:    ret i1 [[TMP4]]
;
  %2 = load ptr, ptr addrspace(3) getelementptr inbounds (%"struct.ompx::state::TeamStateTy", ptr addrspace(3) @_ZN4ompx5state9TeamStateE, i32 0, i32 3), align 8
  store ptr %2, ptr %0, align 8
  %3 = load i32, ptr addrspace(3) getelementptr inbounds (%"struct.ompx::state::TeamStateTy", ptr addrspace(3) @_ZN4ompx5state9TeamStateE, i32 0, i32 1), align 8
  %4 = icmp ne i32 %3, 0
  ret i1 %4
}

; Function Attrs: convergent nounwind
define internal void @__kmpc_kernel_end_parallel() #1 {
; CHECK: Function Attrs: convergent nounwind
; CHECK-LABEL: define {{[^@]+}}@__kmpc_kernel_end_parallel
; CHECK-SAME: () #[[ATTR4:[0-9]+]] {
; CHECK-NEXT:    ret void
;
  ret void
}

; Function Attrs: convergent nounwind
define internal void @__kmpc_target_deinit(ptr nocapture nofree noundef readnone %0, i8 noundef signext %1) #1 {
  ret void
}

; Function Attrs: nounwind
define internal noundef i32 @__kmpc_get_hardware_num_threads_in_block() #3 {
; CHECK: Function Attrs: nounwind
; CHECK-LABEL: define {{[^@]+}}@__kmpc_get_hardware_num_threads_in_block
; CHECK-SAME: () #[[ATTR3]] {
; CHECK-NEXT:    [[TMP1:%.*]] = tail call align 4 dereferenceable(64) ptr addrspace(4) @llvm.amdgcn.dispatch.ptr()
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr addrspace(4) [[TMP1]], i64 4
; CHECK-NEXT:    [[TMP3:%.*]] = load i16, ptr addrspace(4) [[TMP2]], align 4
; CHECK-NEXT:    [[TMP4:%.*]] = zext i16 [[TMP3]] to i32
; CHECK-NEXT:    ret i32 [[TMP4]]
;
  %1 = tail call align 4 dereferenceable(64) ptr addrspace(4) @llvm.amdgcn.dispatch.ptr() #7
  %2 = getelementptr i8, ptr addrspace(4) %1, i64 4
  %3 = load i16, ptr addrspace(4) %2, align 4
  %4 = zext i16 %3 to i32
  ret i32 %4
}

; Function Attrs: nounwind
define internal noundef i32 @__kmpc_get_warp_size() #3 {
; CHECK: Function Attrs: nounwind
; CHECK-LABEL: define {{[^@]+}}@__kmpc_get_warp_size
; CHECK-SAME: () #[[ATTR3]] {
; CHECK-NEXT:    ret i32 0
;
  ret i32 0
}

; Function Attrs: convergent nounwind
define internal void @__kmpc_parallel_51(ptr nocapture nofree noundef readnone %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4, ptr nocapture nofree noundef readonly %5, ptr nofree noundef %6, ptr nocapture nofree noundef readonly %7, i64 noundef %8) #4 {
; CHECK: Function Attrs: alwaysinline convergent norecurse nounwind
; CHECK-LABEL: define {{[^@]+}}@__kmpc_parallel_51
; CHECK-SAME: (ptr nocapture nofree noundef readnone [[TMP0:%.*]], i32 noundef [[TMP1:%.*]], i32 noundef [[TMP2:%.*]], i32 noundef [[TMP3:%.*]], i32 noundef [[TMP4:%.*]], ptr nocapture nofree noundef readonly [[TMP5:%.*]], ptr nofree noundef [[TMP6:%.*]], ptr nocapture nofree noundef readonly [[TMP7:%.*]], i64 noundef [[TMP8:%.*]]) #[[ATTR5:[0-9]+]] {
; CHECK-NEXT:    [[TMP10:%.*]] = load ptr, ptr [[TMP7]], align 8
; CHECK-NEXT:    store ptr [[TMP10]], ptr addrspacecast (ptr addrspace(3) @_ZL29SharedMemVariableSharingSpace to ptr), align 16
; CHECK-NEXT:    store ptr [[TMP6]], ptr addrspace(3) getelementptr inbounds (%"struct.ompx::state::TeamStateTy", ptr addrspace(3) @_ZN4ompx5state9TeamStateE, i32 0, i32 3), align 8
; CHECK-NEXT:    tail call void @llvm.amdgcn.s.barrier()
; CHECK-NEXT:    fence syncscope("workgroup") seq_cst
; CHECK-NEXT:    store ptr null, ptr addrspace(3) getelementptr inbounds (%"struct.ompx::state::TeamStateTy", ptr addrspace(3) @_ZN4ompx5state9TeamStateE, i32 0, i32 3), align 8
; CHECK-NEXT:    ret void
;
  store ptr addrspacecast (ptr addrspace(3) @_ZL29SharedMemVariableSharingSpace to ptr), ptr addrspace(3) @_ZL32SharedMemVariableSharingSpacePtr, align 8
  %10 = load ptr, ptr %7, align 8
  store ptr %10, ptr addrspacecast (ptr addrspace(3) @_ZL29SharedMemVariableSharingSpace to ptr), align 16
  store ptr %6, ptr addrspace(3) getelementptr inbounds (%"struct.ompx::state::TeamStateTy", ptr addrspace(3) @_ZN4ompx5state9TeamStateE, i32 0, i32 3), align 8
  tail call void @llvm.amdgcn.s.barrier() #7
  fence syncscope("workgroup") seq_cst
  store ptr null, ptr addrspace(3) getelementptr inbounds (%"struct.ompx::state::TeamStateTy", ptr addrspace(3) @_ZN4ompx5state9TeamStateE, i32 0, i32 3), align 8
  ret void
}

; Function Attrs: nounwind
define internal void @__kmpc_get_shared_variables(ptr nocapture nofree noundef writeonly %0) #3 {
; CHECK: Function Attrs: norecurse nosync nounwind memory(argmem: write)
; CHECK-LABEL: define {{[^@]+}}@__kmpc_get_shared_variables
; CHECK-SAME: (ptr nocapture nofree noundef writeonly [[TMP0:%.*]]) #[[ATTR6:[0-9]+]] {
; CHECK-NEXT:    ret void
;
  %2 = load ptr, ptr addrspace(3) @_ZL32SharedMemVariableSharingSpacePtr, align 8
  store ptr %2, ptr %0, align 8
  ret void
}

; Function Attrs: convergent nounwind
define internal void @__kmpc_barrier_simple_generic() #1 {
; CHECK: Function Attrs: convergent nounwind
; CHECK-LABEL: define {{[^@]+}}@__kmpc_barrier_simple_generic
; CHECK-SAME: () #[[ATTR4]] {
; CHECK-NEXT:    tail call void @llvm.amdgcn.s.barrier()
; CHECK-NEXT:    ret void
;
  tail call void @llvm.amdgcn.s.barrier() #7
  ret void
}

; Function Attrs: convergent norecurse nounwind
define weak_odr amdgpu_kernel void @__omp_offloading_16_1babdbd2_main_l44(ptr noundef nonnull align 4 dereferenceable(4) %0, ptr noundef nonnull align 4 dereferenceable(4) %1) #5 {
; CHECK: Function Attrs: convergent norecurse nounwind
; CHECK-LABEL: define {{[^@]+}}@__omp_offloading_16_1babdbd2_main_l44
; CHECK-SAME: (ptr noundef nonnull align 4 dereferenceable(4) [[TMP0:%.*]], ptr noundef nonnull align 4 dereferenceable(4) [[TMP1:%.*]]) #[[ATTR7:[0-9]+]] {
; CHECK-NEXT:    [[WORKER_WORK_FN_ADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    [[TMP3:%.*]] = call i32 @__kmpc_target_init(ptr addrspacecast (ptr addrspace(1) null to ptr), i8 1, i1 false)
; CHECK-NEXT:    [[THREAD_IS_WORKER:%.*]] = icmp ne i32 [[TMP3]], -1
; CHECK-NEXT:    br i1 [[THREAD_IS_WORKER]], label [[IS_WORKER_CHECK:%.*]], label [[THREAD_USER_CODE_CHECK:%.*]]
; CHECK:       is_worker_check:
; CHECK-NEXT:    [[BLOCK_HW_SIZE:%.*]] = call i32 @__kmpc_get_hardware_num_threads_in_block()
; CHECK-NEXT:    [[WARP_SIZE:%.*]] = call i32 @__kmpc_get_warp_size()
; CHECK-NEXT:    [[BLOCK_SIZE:%.*]] = sub i32 [[BLOCK_HW_SIZE]], [[WARP_SIZE]]
; CHECK-NEXT:    [[THREAD_IS_MAIN_OR_WORKER:%.*]] = icmp slt i32 [[TMP3]], [[BLOCK_SIZE]]
; CHECK-NEXT:    br i1 [[THREAD_IS_MAIN_OR_WORKER]], label [[WORKER_STATE_MACHINE_BEGIN:%.*]], label [[WORKER_STATE_MACHINE_FINISHED:%.*]]
; CHECK:       worker_state_machine.begin:
; CHECK-NEXT:    call void @__kmpc_barrier_simple_generic(ptr addrspacecast (ptr addrspace(1) null to ptr), i32 [[TMP3]])
; CHECK-NEXT:    [[WORKER_IS_ACTIVE:%.*]] = call i1 @__kmpc_kernel_parallel(ptr [[WORKER_WORK_FN_ADDR]])
; CHECK-NEXT:    [[WORKER_WORK_FN:%.*]] = load ptr, ptr [[WORKER_WORK_FN_ADDR]], align 8
; CHECK-NEXT:    [[WORKER_WORK_FN_ADDR_CAST:%.*]] = bitcast ptr [[WORKER_WORK_FN]] to ptr
; CHECK-NEXT:    [[WORKER_IS_DONE:%.*]] = icmp eq ptr [[WORKER_WORK_FN]], null
; CHECK-NEXT:    br i1 [[WORKER_IS_DONE]], label [[WORKER_STATE_MACHINE_FINISHED]], label [[WORKER_STATE_MACHINE_IS_ACTIVE_CHECK:%.*]]
; CHECK:       worker_state_machine.finished:
; CHECK-NEXT:    ret void
; CHECK:       worker_state_machine.is_active.check:
; CHECK-NEXT:    br i1 [[WORKER_IS_ACTIVE]], label [[WORKER_STATE_MACHINE_PARALLEL_REGION_CHECK:%.*]], label [[WORKER_STATE_MACHINE_DONE_BARRIER:%.*]]
; CHECK:       worker_state_machine.parallel_region.check:
; CHECK-NEXT:    br i1 true, label [[WORKER_STATE_MACHINE_PARALLEL_REGION_EXECUTE:%.*]], label [[WORKER_STATE_MACHINE_PARALLEL_REGION_CHECK1:%.*]]
; CHECK:       worker_state_machine.parallel_region.execute:
; CHECK-NEXT:    call void @__omp_outlined__.1_wrapper(i16 0, i32 [[TMP3]])
; CHECK-NEXT:    br label [[WORKER_STATE_MACHINE_PARALLEL_REGION_END:%.*]]
; CHECK:       worker_state_machine.parallel_region.check1:
; CHECK-NEXT:    br label [[WORKER_STATE_MACHINE_PARALLEL_REGION_END]]
; CHECK:       worker_state_machine.parallel_region.end:
; CHECK-NEXT:    call void @__kmpc_kernel_end_parallel()
; CHECK-NEXT:    br label [[WORKER_STATE_MACHINE_DONE_BARRIER]]
; CHECK:       worker_state_machine.done.barrier:
; CHECK-NEXT:    call void @__kmpc_barrier_simple_generic(ptr addrspacecast (ptr addrspace(1) null to ptr), i32 [[TMP3]])
; CHECK-NEXT:    br label [[WORKER_STATE_MACHINE_BEGIN]]
; CHECK:       thread.user_code.check:
; CHECK-NEXT:    [[TMP4:%.*]] = icmp eq i32 [[TMP3]], -1
; CHECK-NEXT:    br i1 [[TMP4]], label [[TMP5:%.*]], label [[COMMON_RET:%.*]]
; CHECK:       common.ret:
; CHECK-NEXT:    ret void
; CHECK:       5:
; CHECK-NEXT:    call void @__omp_outlined__(ptr null, ptr null, ptr [[TMP0]], ptr [[TMP1]])
; CHECK-NEXT:    br label [[COMMON_RET]]
;
  %3 = call i32 @__kmpc_target_init(ptr addrspacecast (ptr addrspace(1) null to ptr), i8 1, i1 true)
  %4 = icmp eq i32 %3, -1
  br i1 %4, label %5, label %common.ret

common.ret:                                       ; preds = %2, %5
  ret void

5:                                                ; preds = %2
  call void @__omp_outlined__(ptr null, ptr null, ptr %0, ptr %1) #8
  call void @__kmpc_target_deinit(ptr addrspacecast (ptr addrspace(1) null to ptr), i8 1)
  br label %common.ret

; uselistorder directives
  uselistorder label %common.ret, { 1, 0 }
}

; Function Attrs: convergent norecurse nounwind
define internal void @__omp_outlined__(ptr noalias noundef %0, ptr noalias noundef %1, ptr noundef nonnull align 4 dereferenceable(4) %2, ptr noundef nonnull align 4 dereferenceable(4) %3) #6 {
; CHECK: Function Attrs: convergent norecurse nounwind
; CHECK-LABEL: define {{[^@]+}}@__omp_outlined__
; CHECK-SAME: (ptr noalias noundef [[TMP0:%.*]], ptr noalias noundef [[TMP1:%.*]], ptr noundef nonnull align 4 dereferenceable(4) [[TMP2:%.*]], ptr noundef nonnull align 4 dereferenceable(4) [[TMP3:%.*]]) #[[ATTR8:[0-9]+]] {
; CHECK-NEXT:    [[TMP5:%.*]] = alloca [1 x ptr], align 8, addrspace(5)
; CHECK-NEXT:    [[TMP6:%.*]] = addrspacecast ptr addrspace(5) [[TMP5]] to ptr
; CHECK-NEXT:    store i32 5, ptr [[TMP2]], align 4
; CHECK-NEXT:    store ptr [[TMP3]], ptr [[TMP6]], align 8
; CHECK-NEXT:    call void @__kmpc_parallel_51(ptr addrspacecast (ptr addrspace(1) null to ptr), i32 0, i32 1, i32 -1, i32 -1, ptr nonnull @__omp_outlined__.1, ptr nonnull @__omp_outlined__.1_wrapper, ptr nonnull [[TMP6]], i64 1)
; CHECK-NEXT:    ret void
;
  %5 = alloca [1 x ptr], align 8, addrspace(5)
  %6 = addrspacecast ptr addrspace(5) %5 to ptr
  store i32 5, ptr %2, align 4
  store ptr %3, ptr %6, align 8
  call void @__kmpc_parallel_51(ptr addrspacecast (ptr addrspace(1) null to ptr), i32 0, i32 1, i32 -1, i32 -1, ptr nonnull @__omp_outlined__.1, ptr nonnull @__omp_outlined__.1_wrapper, ptr nonnull %6, i64 1)
  ret void
}

; Function Attrs: convergent norecurse nounwind
define internal void @__omp_outlined__.1(ptr noalias noundef %0, ptr noalias noundef %1, ptr noundef nonnull align 4 dereferenceable(4) %2) #6 {
; CHECK: Function Attrs: norecurse nosync nounwind memory(argmem: write)
; CHECK-LABEL: define {{[^@]+}}@__omp_outlined__.1
; CHECK-SAME: (ptr noalias nocapture noundef readnone [[TMP0:%.*]], ptr noalias nocapture noundef readnone [[TMP1:%.*]], ptr nocapture noundef nonnull writeonly align 4 dereferenceable(4) [[TMP2:%.*]]) #[[ATTR9:[0-9]+]] {
; CHECK-NEXT:    store i32 6, ptr [[TMP2]], align 4
; CHECK-NEXT:    ret void
;
  store i32 6, ptr %2, align 4
  ret void
}

; Function Attrs: convergent norecurse nounwind
define internal void @__omp_outlined__.1_wrapper(i16 noundef zeroext %0, i32 noundef %1) #6 {
; CHECK: Function Attrs: convergent norecurse nosync nounwind
; CHECK-LABEL: define {{[^@]+}}@__omp_outlined__.1_wrapper
; CHECK-SAME: (i16 noundef zeroext [[TMP0:%.*]], i32 noundef [[TMP1:%.*]]) #[[ATTR10:[0-9]+]] {
; CHECK-NEXT:    [[TMP3:%.*]] = alloca ptr, align 8, addrspace(5)
; CHECK-NEXT:    [[TMP4:%.*]] = addrspacecast ptr addrspace(5) [[TMP3]] to ptr
; CHECK-NEXT:    call void @__kmpc_get_shared_variables(ptr writeonly [[TMP4]])
; CHECK-NEXT:    [[TMP5:%.*]] = load ptr, ptr addrspacecast (ptr addrspace(3) @_ZL29SharedMemVariableSharingSpace to ptr), align 8
; CHECK-NEXT:    call void @__omp_outlined__.1(ptr readnone null, ptr readnone null, ptr writeonly [[TMP5]])
; CHECK-NEXT:    ret void
;
  %3 = alloca ptr, align 8, addrspace(5)
  %4 = addrspacecast ptr addrspace(5) %3 to ptr
  call void @__kmpc_get_shared_variables(ptr %4)
  %5 = load ptr, ptr %4, align 8
  %6 = load ptr, ptr %5, align 8
  call void @__omp_outlined__.1(ptr null, ptr null, ptr %6) #8
  ret void
}

; uselistorder directives
uselistorder i32 0, { 2, 3, 0, 4, 5, 1, 6 }
uselistorder i32 -1, { 1, 2, 3, 0 }

attributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nounwind "llvm.assume"="ompx_no_call_asm,ompx_no_call_asm" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="gfx90a" "target-features"="+16-bit-insts,+ci-insts,+dl-insts,+dot1-insts,+dot10-insts,+dot2-insts,+dot3-insts,+dot4-insts,+dot5-insts,+dot6-insts,+dot7-insts,+dpp,+gfx8-insts,+gfx9-insts,+gfx90a-insts,+mai-insts,+s-memrealtime,+s-memtime-inst,+wavefrontsize64" }
attributes #2 = { convergent nocallback nofree nounwind willreturn }
attributes #3 = { nounwind "llvm.assume"="ompx_no_call_asm,ompx_no_call_asm" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="gfx90a" "target-features"="+16-bit-insts,+ci-insts,+dl-insts,+dot1-insts,+dot10-insts,+dot2-insts,+dot3-insts,+dot4-insts,+dot5-insts,+dot6-insts,+dot7-insts,+dpp,+gfx8-insts,+gfx9-insts,+gfx90a-insts,+mai-insts,+s-memrealtime,+s-memtime-inst,+wavefrontsize64" }
attributes #4 = { convergent nounwind "llvm.assume"="ompx_no_call_asm" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="gfx90a" "target-features"="+16-bit-insts,+ci-insts,+dl-insts,+dot1-insts,+dot10-insts,+dot2-insts,+dot3-insts,+dot4-insts,+dot5-insts,+dot6-insts,+dot7-insts,+dpp,+gfx8-insts,+gfx9-insts,+gfx90a-insts,+mai-insts,+s-memrealtime,+s-memtime-inst,+wavefrontsize64" }
attributes #5 = { convergent norecurse nounwind "frame-pointer"="all" "kernel" "no-trapping-math"="true" "omp_target_num_teams"="1" "stack-protector-buffer-size"="8" "target-cpu"="gfx90a" "target-features"="+16-bit-insts,+ci-insts,+dl-insts,+dot1-insts,+dot10-insts,+dot2-insts,+dot3-insts,+dot4-insts,+dot5-insts,+dot6-insts,+dot7-insts,+dpp,+gfx8-insts,+gfx9-insts,+gfx90a-insts,+mai-insts,+s-memrealtime,+s-memtime-inst,+wavefrontsize64" "uniform-work-group-size"="true" }
attributes #6 = { convergent norecurse nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="gfx90a" "target-features"="+16-bit-insts,+ci-insts,+dl-insts,+dot1-insts,+dot10-insts,+dot2-insts,+dot3-insts,+dot4-insts,+dot5-insts,+dot6-insts,+dot7-insts,+dpp,+gfx8-insts,+gfx9-insts,+gfx90a-insts,+mai-insts,+s-memrealtime,+s-memtime-inst,+wavefrontsize64" }
attributes #7 = { "llvm.assume"="ompx_no_call_asm" }
attributes #8 = { nounwind }

!llvm.module.flags = !{!0}

!0 = !{i32 7, !"openmp", i32 50}
;.
; CHECK: attributes #[[ATTR0:[0-9]+]] = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
; CHECK: attributes #[[ATTR1]] = { convergent nosync nounwind memory(none) "llvm.assume"="ompx_no_call_asm,ompx_no_call_asm" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="gfx90a" "target-features"="+16-bit-insts,+ci-insts,+dl-insts,+dot1-insts,+dot10-insts,+dot2-insts,+dot3-insts,+dot4-insts,+dot5-insts,+dot6-insts,+dot7-insts,+dpp,+gfx8-insts,+gfx9-insts,+gfx90a-insts,+mai-insts,+s-memrealtime,+s-memtime-inst,+wavefrontsize64" }
; CHECK: attributes #[[ATTR2:[0-9]+]] = { convergent nocallback nofree nounwind willreturn }
; CHECK: attributes #[[ATTR3]] = { nounwind "llvm.assume"="ompx_no_call_asm,ompx_no_call_asm" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="gfx90a" "target-features"="+16-bit-insts,+ci-insts,+dl-insts,+dot1-insts,+dot10-insts,+dot2-insts,+dot3-insts,+dot4-insts,+dot5-insts,+dot6-insts,+dot7-insts,+dpp,+gfx8-insts,+gfx9-insts,+gfx90a-insts,+mai-insts,+s-memrealtime,+s-memtime-inst,+wavefrontsize64" }
; CHECK: attributes #[[ATTR4]] = { convergent nounwind "llvm.assume"="ompx_no_call_asm,ompx_no_call_asm" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="gfx90a" "target-features"="+16-bit-insts,+ci-insts,+dl-insts,+dot1-insts,+dot10-insts,+dot2-insts,+dot3-insts,+dot4-insts,+dot5-insts,+dot6-insts,+dot7-insts,+dpp,+gfx8-insts,+gfx9-insts,+gfx90a-insts,+mai-insts,+s-memrealtime,+s-memtime-inst,+wavefrontsize64" }
; CHECK: attributes #[[ATTR5]] = { alwaysinline convergent norecurse nounwind "llvm.assume"="ompx_no_call_asm" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="gfx90a" "target-features"="+16-bit-insts,+ci-insts,+dl-insts,+dot1-insts,+dot10-insts,+dot2-insts,+dot3-insts,+dot4-insts,+dot5-insts,+dot6-insts,+dot7-insts,+dpp,+gfx8-insts,+gfx9-insts,+gfx90a-insts,+mai-insts,+s-memrealtime,+s-memtime-inst,+wavefrontsize64" }
; CHECK: attributes #[[ATTR6]] = { norecurse nosync nounwind memory(argmem: write) "llvm.assume"="ompx_no_call_asm,ompx_no_call_asm" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="gfx90a" "target-features"="+16-bit-insts,+ci-insts,+dl-insts,+dot1-insts,+dot10-insts,+dot2-insts,+dot3-insts,+dot4-insts,+dot5-insts,+dot6-insts,+dot7-insts,+dpp,+gfx8-insts,+gfx9-insts,+gfx90a-insts,+mai-insts,+s-memrealtime,+s-memtime-inst,+wavefrontsize64" }
; CHECK: attributes #[[ATTR7]] = { convergent norecurse nounwind "frame-pointer"="all" "kernel" "no-trapping-math"="true" "omp_target_num_teams"="1" "stack-protector-buffer-size"="8" "target-cpu"="gfx90a" "target-features"="+16-bit-insts,+ci-insts,+dl-insts,+dot1-insts,+dot10-insts,+dot2-insts,+dot3-insts,+dot4-insts,+dot5-insts,+dot6-insts,+dot7-insts,+dpp,+gfx8-insts,+gfx9-insts,+gfx90a-insts,+mai-insts,+s-memrealtime,+s-memtime-inst,+wavefrontsize64" "uniform-work-group-size"="true" }
; CHECK: attributes #[[ATTR8]] = { convergent norecurse nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="gfx90a" "target-features"="+16-bit-insts,+ci-insts,+dl-insts,+dot1-insts,+dot10-insts,+dot2-insts,+dot3-insts,+dot4-insts,+dot5-insts,+dot6-insts,+dot7-insts,+dpp,+gfx8-insts,+gfx9-insts,+gfx90a-insts,+mai-insts,+s-memrealtime,+s-memtime-inst,+wavefrontsize64" }
; CHECK: attributes #[[ATTR9]] = { norecurse nosync nounwind memory(argmem: write) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="gfx90a" "target-features"="+16-bit-insts,+ci-insts,+dl-insts,+dot1-insts,+dot10-insts,+dot2-insts,+dot3-insts,+dot4-insts,+dot5-insts,+dot6-insts,+dot7-insts,+dpp,+gfx8-insts,+gfx9-insts,+gfx90a-insts,+mai-insts,+s-memrealtime,+s-memtime-inst,+wavefrontsize64" }
; CHECK: attributes #[[ATTR10]] = { convergent norecurse nosync nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="gfx90a" "target-features"="+16-bit-insts,+ci-insts,+dl-insts,+dot1-insts,+dot10-insts,+dot2-insts,+dot3-insts,+dot4-insts,+dot5-insts,+dot6-insts,+dot7-insts,+dpp,+gfx8-insts,+gfx9-insts,+gfx90a-insts,+mai-insts,+s-memrealtime,+s-memtime-inst,+wavefrontsize64" }
; CHECK: attributes #[[ATTR11:[0-9]+]] = { "llvm.assume"="ompx_no_call_asm" }
; CHECK: attributes #[[ATTR12:[0-9]+]] = { nosync nounwind }
; CHECK: attributes #[[ATTR13:[0-9]+]] = { nounwind }
;.
; CHECK: [[META0:![0-9]+]] = !{i32 7, !"openmp", i32 50}
;.
