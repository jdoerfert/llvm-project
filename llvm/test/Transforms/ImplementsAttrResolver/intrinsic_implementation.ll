; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -passes=implements-attr-resolver -S | FileCheck %s

@llvm.compiler.used = appending global [2 x i8*] [i8* bitcast (float (float)* @my_sin to i8*), i8* bitcast (float (float)* @my_cos_type_mismatch to i8*)], section "llvm.metadata"

define internal float @my_sin(float %d) "implements"="llvm.sin.f32" {
; CHECK-LABEL: @my_sin(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret float [[D:%.*]]
;
entry:
  ret float %d
}

define internal float @my_cos_type_mismatch(float %d) "implements"="llvm.cos.f64" {
; CHECK-LABEL: @my_cos_type_mismatch(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret float [[D:%.*]]
;
entry:
  ret float %d
}

define double @foo(double %d, float %f) {
; CHECK-LABEL: @foo(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = tail call fast float @my_sin(float [[F:%.*]])
; CHECK-NEXT:    [[TMP1:%.*]] = tail call fast double bitcast (float (float)* @my_cos_type_mismatch to double (double)*)(double [[D:%.*]])
; CHECK-NEXT:    ret double [[TMP1]]
;
entry:
  %0 = tail call fast float @llvm.sin.f32(float %f)
  %1 = tail call fast double @llvm.cos.f64(double %d)
  ret double %1
}

declare float @llvm.sin.f32(float)
declare double @llvm.cos.f64(double)
