; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --function-signature
; RUN: opt -S -passes='openmp-opt' < %s | FileCheck %s
; RUN: opt -openmp-opt-disable-folding -S -passes='openmp-opt' < %s | FileCheck %s --check-prefix=CHECK-DISABLED
; ModuleID = 'single_threaded_exeuction.c'

%struct.ident_t = type { i32, i32, i32, i32, i8* }
%"struct._OMP::KernelEnvironmentTy" = type { %struct.ident_t, %"struct._OMP::ConfigurationEnvironmentTy", i16 }
%"struct._OMP::ConfigurationEnvironmentTy" = type { i8, i8 }

@0 = private unnamed_addr constant [1 x i8] c"\00", align 1
@1 = private unnamed_addr constant %struct.ident_t { i32 0, i32 2, i32 0, i32 0, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @0, i32 0, i32 0) }, align 8
@kernel_kernel_info = global %"struct._OMP::KernelEnvironmentTy" { %struct.ident_t { i32 0, i32 2, i32 0, i32 22, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @0, i32 0, i32 0) }, %"struct._OMP::ConfigurationEnvironmentTy" { i8 1, i8 1 }, i16 0 }

define void @kernel() {
; CHECK-LABEL: define {{[^@]+}}@kernel() {
; CHECK-NEXT:    [[WORKER_WORK_FN_ADDR:%.*]] = alloca i8*, align 8
; CHECK-NEXT:    [[CALL:%.*]] = call i32 @__kmpc_target_init(%"struct._OMP::KernelEnvironmentTy"* @kernel_kernel_info, i1 true)
; CHECK-NEXT:    [[THREAD_IS_WORKER:%.*]] = icmp ne i32 [[CALL]], -1
; CHECK-NEXT:    br i1 [[THREAD_IS_WORKER]], label [[IS_WORKER_CHECK:%.*]], label [[THREAD_USER_CODE_CHECK:%.*]]
; CHECK:       is_worker_check:
; CHECK-NEXT:    [[BLOCK_HW_SIZE:%.*]] = call i32 @__kmpc_get_hardware_num_threads_in_block()
; CHECK-NEXT:    [[WARP_SIZE:%.*]] = call i32 @__kmpc_get_warp_size()
; CHECK-NEXT:    [[BLOCK_SIZE:%.*]] = sub i32 [[BLOCK_HW_SIZE]], [[WARP_SIZE]]
; CHECK-NEXT:    [[THREAD_IS_MAIN_OR_WORKER:%.*]] = icmp slt i32 [[CALL]], [[BLOCK_SIZE]]
; CHECK-NEXT:    br i1 [[THREAD_IS_MAIN_OR_WORKER]], label [[WORKER_STATE_MACHINE_BEGIN:%.*]], label [[WORKER_STATE_MACHINE_FINISHED:%.*]]
; CHECK:       worker_state_machine.begin:
; CHECK-NEXT:    call void @__kmpc_barrier_simple_generic(%struct.ident_t* getelementptr inbounds (%"struct._OMP::KernelEnvironmentTy", %"struct._OMP::KernelEnvironmentTy"* @kernel_kernel_info, i32 0, i32 0), i32 [[CALL]])
; CHECK-NEXT:    [[WORKER_IS_ACTIVE:%.*]] = call i1 @__kmpc_kernel_parallel(i8** [[WORKER_WORK_FN_ADDR]])
; CHECK-NEXT:    [[WORKER_WORK_FN:%.*]] = load i8*, i8** [[WORKER_WORK_FN_ADDR]], align 8
; CHECK-NEXT:    [[WORKER_WORK_FN_ADDR_CAST:%.*]] = bitcast i8* [[WORKER_WORK_FN]] to void (i16, i32)*
; CHECK-NEXT:    [[WORKER_IS_DONE:%.*]] = icmp eq i8* [[WORKER_WORK_FN]], null
; CHECK-NEXT:    br i1 [[WORKER_IS_DONE]], label [[WORKER_STATE_MACHINE_FINISHED]], label [[WORKER_STATE_MACHINE_IS_ACTIVE_CHECK:%.*]]
; CHECK:       worker_state_machine.finished:
; CHECK-NEXT:    ret void
; CHECK:       worker_state_machine.is_active.check:
; CHECK-NEXT:    br i1 [[WORKER_IS_ACTIVE]], label [[WORKER_STATE_MACHINE_PARALLEL_REGION_FALLBACK_EXECUTE:%.*]], label [[WORKER_STATE_MACHINE_DONE_BARRIER:%.*]]
; CHECK:       worker_state_machine.parallel_region.fallback.execute:
; CHECK-NEXT:    call void [[WORKER_WORK_FN_ADDR_CAST]](i16 0, i32 [[CALL]])
; CHECK-NEXT:    br label [[WORKER_STATE_MACHINE_PARALLEL_REGION_END:%.*]]
; CHECK:       worker_state_machine.parallel_region.end:
; CHECK-NEXT:    call void @__kmpc_kernel_end_parallel()
; CHECK-NEXT:    br label [[WORKER_STATE_MACHINE_DONE_BARRIER]]
; CHECK:       worker_state_machine.done.barrier:
; CHECK-NEXT:    call void @__kmpc_barrier_simple_generic(%struct.ident_t* getelementptr inbounds (%"struct._OMP::KernelEnvironmentTy", %"struct._OMP::KernelEnvironmentTy"* @kernel_kernel_info, i32 0, i32 0), i32 [[CALL]])
; CHECK-NEXT:    br label [[WORKER_STATE_MACHINE_BEGIN]]
; CHECK:       thread.user_code.check:
; CHECK-NEXT:    [[CMP:%.*]] = icmp eq i32 [[CALL]], -1
; CHECK-NEXT:    br i1 [[CMP]], label [[IF_THEN:%.*]], label [[IF_ELSE:%.*]]
; CHECK:       if.then:
; CHECK-NEXT:    call void @foo()
; CHECK-NEXT:    br label [[IF_END:%.*]]
; CHECK:       if.else:
; CHECK-NEXT:    call void @bar()
; CHECK-NEXT:    br label [[IF_END]]
; CHECK:       if.end:
; CHECK-NEXT:    call void @foobar.internalized()
; CHECK-NEXT:    call void @__kmpc_target_deinit(i1 true)
; CHECK-NEXT:    ret void
;
; CHECK-DISABLED-LABEL: define {{[^@]+}}@kernel() {
; CHECK-DISABLED-NEXT:    [[WORKER_WORK_FN_ADDR:%.*]] = alloca i8*, align 8
; CHECK-DISABLED-NEXT:    [[CALL:%.*]] = call i32 @__kmpc_target_init(%"struct._OMP::KernelEnvironmentTy"* @kernel_kernel_info, i1 true)
; CHECK-DISABLED-NEXT:    [[THREAD_IS_WORKER:%.*]] = icmp ne i32 [[CALL]], -1
; CHECK-DISABLED-NEXT:    br i1 [[THREAD_IS_WORKER]], label [[IS_WORKER_CHECK:%.*]], label [[THREAD_USER_CODE_CHECK:%.*]]
; CHECK-DISABLED:       is_worker_check:
; CHECK-DISABLED-NEXT:    [[BLOCK_HW_SIZE:%.*]] = call i32 @__kmpc_get_hardware_num_threads_in_block()
; CHECK-DISABLED-NEXT:    [[WARP_SIZE:%.*]] = call i32 @__kmpc_get_warp_size()
; CHECK-DISABLED-NEXT:    [[BLOCK_SIZE:%.*]] = sub i32 [[BLOCK_HW_SIZE]], [[WARP_SIZE]]
; CHECK-DISABLED-NEXT:    [[THREAD_IS_MAIN_OR_WORKER:%.*]] = icmp slt i32 [[CALL]], [[BLOCK_SIZE]]
; CHECK-DISABLED-NEXT:    br i1 [[THREAD_IS_MAIN_OR_WORKER]], label [[WORKER_STATE_MACHINE_BEGIN:%.*]], label [[WORKER_STATE_MACHINE_FINISHED:%.*]]
; CHECK-DISABLED:       worker_state_machine.begin:
; CHECK-DISABLED-NEXT:    call void @__kmpc_barrier_simple_generic(%struct.ident_t* getelementptr inbounds (%"struct._OMP::KernelEnvironmentTy", %"struct._OMP::KernelEnvironmentTy"* @kernel_kernel_info, i32 0, i32 0), i32 [[CALL]])
; CHECK-DISABLED-NEXT:    [[WORKER_IS_ACTIVE:%.*]] = call i1 @__kmpc_kernel_parallel(i8** [[WORKER_WORK_FN_ADDR]])
; CHECK-DISABLED-NEXT:    [[WORKER_WORK_FN:%.*]] = load i8*, i8** [[WORKER_WORK_FN_ADDR]], align 8
; CHECK-DISABLED-NEXT:    [[WORKER_WORK_FN_ADDR_CAST:%.*]] = bitcast i8* [[WORKER_WORK_FN]] to void (i16, i32)*
; CHECK-DISABLED-NEXT:    [[WORKER_IS_DONE:%.*]] = icmp eq i8* [[WORKER_WORK_FN]], null
; CHECK-DISABLED-NEXT:    br i1 [[WORKER_IS_DONE]], label [[WORKER_STATE_MACHINE_FINISHED]], label [[WORKER_STATE_MACHINE_IS_ACTIVE_CHECK:%.*]]
; CHECK-DISABLED:       worker_state_machine.finished:
; CHECK-DISABLED-NEXT:    ret void
; CHECK-DISABLED:       worker_state_machine.is_active.check:
; CHECK-DISABLED-NEXT:    br i1 [[WORKER_IS_ACTIVE]], label [[WORKER_STATE_MACHINE_PARALLEL_REGION_FALLBACK_EXECUTE:%.*]], label [[WORKER_STATE_MACHINE_DONE_BARRIER:%.*]]
; CHECK-DISABLED:       worker_state_machine.parallel_region.fallback.execute:
; CHECK-DISABLED-NEXT:    call void [[WORKER_WORK_FN_ADDR_CAST]](i16 0, i32 [[CALL]])
; CHECK-DISABLED-NEXT:    br label [[WORKER_STATE_MACHINE_PARALLEL_REGION_END:%.*]]
; CHECK-DISABLED:       worker_state_machine.parallel_region.end:
; CHECK-DISABLED-NEXT:    call void @__kmpc_kernel_end_parallel()
; CHECK-DISABLED-NEXT:    br label [[WORKER_STATE_MACHINE_DONE_BARRIER]]
; CHECK-DISABLED:       worker_state_machine.done.barrier:
; CHECK-DISABLED-NEXT:    call void @__kmpc_barrier_simple_generic(%struct.ident_t* getelementptr inbounds (%"struct._OMP::KernelEnvironmentTy", %"struct._OMP::KernelEnvironmentTy"* @kernel_kernel_info, i32 0, i32 0), i32 [[CALL]])
; CHECK-DISABLED-NEXT:    br label [[WORKER_STATE_MACHINE_BEGIN]]
; CHECK-DISABLED:       thread.user_code.check:
; CHECK-DISABLED-NEXT:    [[CMP:%.*]] = icmp eq i32 [[CALL]], -1
; CHECK-DISABLED-NEXT:    br i1 [[CMP]], label [[IF_THEN:%.*]], label [[IF_ELSE:%.*]]
; CHECK-DISABLED:       if.then:
; CHECK-DISABLED-NEXT:    call void @foo()
; CHECK-DISABLED-NEXT:    br label [[IF_END:%.*]]
; CHECK-DISABLED:       if.else:
; CHECK-DISABLED-NEXT:    call void @bar()
; CHECK-DISABLED-NEXT:    br label [[IF_END]]
; CHECK-DISABLED:       if.end:
; CHECK-DISABLED-NEXT:    call void @foobar.internalized()
; CHECK-DISABLED-NEXT:    call void @__kmpc_target_deinit(i1 true)
; CHECK-DISABLED-NEXT:    ret void
;
  %call = call i32 @__kmpc_target_init(%"struct._OMP::KernelEnvironmentTy"* @kernel_kernel_info, i1 true)
  %cmp = icmp eq i32 %call, -1
  br i1 %cmp, label %if.then, label %if.else
if.then:
  call void @foo()
  br label %if.end
if.else:
  call void @bar()
  br label %if.end
if.end:
  call void @foobar()
  call void @__kmpc_target_deinit(i1 true)
  ret void
}

; Function Attrs: noinline
define internal void @foo() {
; CHECK-LABEL: define {{[^@]+}}@foo() {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TID:%.*]] = call i32 @__kmpc_get_hardware_thread_id()
; CHECK-NEXT:    br label [[IF_THEN:%.*]]
; CHECK:       if.then:
; CHECK-NEXT:    [[BC:%.*]] = bitcast %"struct._OMP::KernelEnvironmentTy"* @kernel_kernel_info to i8*
; CHECK-NEXT:    call void @baz(i8* [[BC]])
; CHECK-NEXT:    br label [[IF_END:%.*]]
; CHECK:       if.end:
; CHECK-NEXT:    ret void
;
; CHECK-DISABLED-LABEL: define {{[^@]+}}@foo() {
; CHECK-DISABLED-NEXT:  entry:
; CHECK-DISABLED-NEXT:    [[TID:%.*]] = call i32 @__kmpc_get_hardware_thread_id()
; CHECK-DISABLED-NEXT:    [[ISMAIN:%.*]] = call signext i8 @__kmpc_is_generic_main_thread_id(i32 [[TID]])
; CHECK-DISABLED-NEXT:    [[PRED:%.*]] = icmp eq i8 [[ISMAIN]], 1
; CHECK-DISABLED-NEXT:    br i1 [[PRED]], label [[IF_THEN:%.*]], label [[IF_END:%.*]]
; CHECK-DISABLED:       if.then:
; CHECK-DISABLED-NEXT:    [[KI:%.*]] = call %"struct._OMP::KernelEnvironmentTy"* @__kmpc_get_kernel_environment()
; CHECK-DISABLED-NEXT:    [[BC:%.*]] = bitcast %"struct._OMP::KernelEnvironmentTy"* [[KI]] to i8*
; CHECK-DISABLED-NEXT:    call void @baz(i8* [[BC]])
; CHECK-DISABLED-NEXT:    br label [[IF_END]]
; CHECK-DISABLED:       if.end:
; CHECK-DISABLED-NEXT:    ret void
;
entry:
  %tid = call i32 @__kmpc_get_hardware_thread_id();
  %ismain = call signext i8 @__kmpc_is_generic_main_thread_id(i32 %tid)
  %pred = icmp eq i8 %ismain, 1
  br i1 %pred, label %if.then, label %if.end

if.then:
  %ki = call %"struct._OMP::KernelEnvironmentTy"* @__kmpc_get_kernel_environment()
  %bc = bitcast %"struct._OMP::KernelEnvironmentTy"* %ki to i8*
  call void @baz(i8* %bc)
  br label %if.end

if.end:
  ret void
}

; Function Attrs: noinline
define internal void @bar() {
; CHECK-LABEL: define {{[^@]+}}@bar() {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TID:%.*]] = call i32 @__kmpc_get_hardware_thread_id()
; CHECK-NEXT:    [[ISMAIN:%.*]] = call signext i8 @__kmpc_is_generic_main_thread_id(i32 [[TID]])
; CHECK-NEXT:    [[PRED:%.*]] = icmp eq i8 [[ISMAIN]], 1
; CHECK-NEXT:    br i1 [[PRED]], label [[IF_THEN:%.*]], label [[IF_END:%.*]]
; CHECK:       if.then:
; CHECK-NEXT:    [[BC:%.*]] = bitcast %"struct._OMP::KernelEnvironmentTy"* @kernel_kernel_info to i8*
; CHECK-NEXT:    call void @baz(i8* [[BC]])
; CHECK-NEXT:    br label [[IF_END]]
; CHECK:       if.end:
; CHECK-NEXT:    ret void
;
; CHECK-DISABLED-LABEL: define {{[^@]+}}@bar() {
; CHECK-DISABLED-NEXT:  entry:
; CHECK-DISABLED-NEXT:    [[TID:%.*]] = call i32 @__kmpc_get_hardware_thread_id()
; CHECK-DISABLED-NEXT:    [[ISMAIN:%.*]] = call signext i8 @__kmpc_is_generic_main_thread_id(i32 [[TID]])
; CHECK-DISABLED-NEXT:    [[PRED:%.*]] = icmp eq i8 [[ISMAIN]], 1
; CHECK-DISABLED-NEXT:    br i1 [[PRED]], label [[IF_THEN:%.*]], label [[IF_END:%.*]]
; CHECK-DISABLED:       if.then:
; CHECK-DISABLED-NEXT:    [[KI:%.*]] = call %"struct._OMP::KernelEnvironmentTy"* @__kmpc_get_kernel_environment()
; CHECK-DISABLED-NEXT:    [[BC:%.*]] = bitcast %"struct._OMP::KernelEnvironmentTy"* [[KI]] to i8*
; CHECK-DISABLED-NEXT:    call void @baz(i8* [[BC]])
; CHECK-DISABLED-NEXT:    br label [[IF_END]]
; CHECK-DISABLED:       if.end:
; CHECK-DISABLED-NEXT:    ret void
;
entry:
  %tid = call i32 @__kmpc_get_hardware_thread_id();
  %ismain = call signext i8 @__kmpc_is_generic_main_thread_id(i32 %tid)
  %pred = icmp eq i8 %ismain, 1
  br i1 %pred, label %if.then, label %if.end

if.then:
  %ki = call %"struct._OMP::KernelEnvironmentTy"* @__kmpc_get_kernel_environment()
  %bc = bitcast %"struct._OMP::KernelEnvironmentTy"* %ki to i8*
  call void @baz(i8* %bc)
  br label %if.end

if.end:
  ret void
}

define void @foobar() {
; CHECK-LABEL: define {{[^@]+}}@foobar() {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TID:%.*]] = call i32 @__kmpc_get_hardware_thread_id()
; CHECK-NEXT:    [[ISMAIN:%.*]] = call signext i8 @__kmpc_is_generic_main_thread_id(i32 [[TID]])
; CHECK-NEXT:    [[PRED:%.*]] = icmp eq i8 [[ISMAIN]], 1
; CHECK-NEXT:    br i1 [[PRED]], label [[IF_THEN:%.*]], label [[IF_END:%.*]]
; CHECK:       if.then:
; CHECK-NEXT:    [[KI:%.*]] = call %"struct._OMP::KernelEnvironmentTy"* @__kmpc_get_kernel_environment()
; CHECK-NEXT:    [[BC:%.*]] = bitcast %"struct._OMP::KernelEnvironmentTy"* [[KI]] to i8*
; CHECK-NEXT:    call void @baz(i8* [[BC]])
; CHECK-NEXT:    br label [[IF_END]]
; CHECK:       if.end:
; CHECK-NEXT:    ret void
;
; CHECK-DISABLED-LABEL: define {{[^@]+}}@foobar() {
; CHECK-DISABLED-NEXT:  entry:
; CHECK-DISABLED-NEXT:    [[TID:%.*]] = call i32 @__kmpc_get_hardware_thread_id()
; CHECK-DISABLED-NEXT:    [[ISMAIN:%.*]] = call signext i8 @__kmpc_is_generic_main_thread_id(i32 [[TID]])
; CHECK-DISABLED-NEXT:    [[PRED:%.*]] = icmp eq i8 [[ISMAIN]], 1
; CHECK-DISABLED-NEXT:    br i1 [[PRED]], label [[IF_THEN:%.*]], label [[IF_END:%.*]]
; CHECK-DISABLED:       if.then:
; CHECK-DISABLED-NEXT:    [[KI:%.*]] = call %"struct._OMP::KernelEnvironmentTy"* @__kmpc_get_kernel_environment()
; CHECK-DISABLED-NEXT:    [[BC:%.*]] = bitcast %"struct._OMP::KernelEnvironmentTy"* [[KI]] to i8*
; CHECK-DISABLED-NEXT:    call void @baz(i8* [[BC]])
; CHECK-DISABLED-NEXT:    br label [[IF_END]]
; CHECK-DISABLED:       if.end:
; CHECK-DISABLED-NEXT:    ret void
;
entry:
  %tid = call i32 @__kmpc_get_hardware_thread_id();
  %ismain = call signext i8 @__kmpc_is_generic_main_thread_id(i32 %tid)
  %pred = icmp eq i8 %ismain, 1
  br i1 %pred, label %if.then, label %if.end

if.then:
  %ki = call %"struct._OMP::KernelEnvironmentTy"* @__kmpc_get_kernel_environment()
  %bc = bitcast %"struct._OMP::KernelEnvironmentTy"* %ki to i8*
  call void @baz(i8* %bc)
  br label %if.end

if.end:
  ret void
}

declare void @baz(i8*)

declare i8 @__kmpc_is_generic_main_thread_id(i32)
declare %"struct._OMP::KernelEnvironmentTy"* @__kmpc_get_kernel_environment()

declare i32 @__kmpc_get_hardware_thread_id()

declare i32 @__kmpc_target_init(%"struct._OMP::KernelEnvironmentTy"* %KernelEnv, i1)
declare void @__kmpc_target_deinit(i1)

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!3, !4, !5, !6}
!nvvm.annotations = !{!7}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 13.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "fold_generic_main_thread.c", directory: "/tmp/fold_generic_main_thread.c")
!2 = !{}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = !{i32 1, !"wchar_size", i32 4}
!5 = !{i32 7, !"openmp", i32 50}
!6 = !{i32 7, !"openmp-device", i32 50}
!7 = !{void ()* @kernel, !"kernel", i32 1}
