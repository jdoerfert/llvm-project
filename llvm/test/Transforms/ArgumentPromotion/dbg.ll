; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --function-signature --scrub-attributes 
; RUN: opt < %s -argpromotion -S | FileCheck %s --check-prefixes=ARGPROMOTION,ALL
; RUN: opt < %s -passes=argpromotion -S | FileCheck %s --check-prefixes=ARGPROMOTION,ALL

declare void @sink(i32)

define internal void @test(i32** %X) !dbg !2 {
; ARGPROMOTION-LABEL: define {{[^@]+}}@test
; ARGPROMOTION-SAME: (i32 [[X_VAL_VAL:%.*]]) !dbg !3
; ARGPROMOTION-NEXT:    call void @sink(i32 [[X_VAL_VAL]])
; ARGPROMOTION-NEXT:    ret void
;
  %1 = load i32*, i32** %X, align 8
  %2 = load i32, i32* %1, align 8
  call void @sink(i32 %2)
  ret void
}

%struct.pair = type { i32, i32 }

define internal void @test_byval(%struct.pair* byval %P) {
; ARGPROMOTION-LABEL: define {{[^@]+}}@test_byval
; ARGPROMOTION-SAME: (i32 [[P_0:%.*]], i32 [[P_1:%.*]])
; ARGPROMOTION-NEXT:    [[P:%.*]] = alloca [[STRUCT_PAIR:%.*]]
; ARGPROMOTION-NEXT:    [[DOT0:%.*]] = getelementptr [[STRUCT_PAIR]], %struct.pair* [[P]], i32 0, i32 0
; ARGPROMOTION-NEXT:    store i32 [[P_0]], i32* [[DOT0]]
; ARGPROMOTION-NEXT:    [[DOT1:%.*]] = getelementptr [[STRUCT_PAIR]], %struct.pair* [[P]], i32 0, i32 1
; ARGPROMOTION-NEXT:    store i32 [[P_1]], i32* [[DOT1]]
; ARGPROMOTION-NEXT:    ret void
;
  ret void
}

define void @caller(i32** %Y, %struct.pair* %P) {
; ARGPROMOTION-LABEL: define {{[^@]+}}@caller
; ARGPROMOTION-SAME: (i32** [[Y:%.*]], %struct.pair* [[P:%.*]])
; ARGPROMOTION-NEXT:    [[Y_VAL:%.*]] = load i32*, i32** [[Y]], align 8, !dbg !4
; ARGPROMOTION-NEXT:    [[Y_VAL_VAL:%.*]] = load i32, i32* [[Y_VAL]], align 8, !dbg !4
; ARGPROMOTION-NEXT:    call void @test(i32 [[Y_VAL_VAL]]), !dbg !4
; ARGPROMOTION-NEXT:    [[P_0:%.*]] = getelementptr [[STRUCT_PAIR:%.*]], %struct.pair* [[P]], i32 0, i32 0, !dbg !5
; ARGPROMOTION-NEXT:    [[P_0_VAL:%.*]] = load i32, i32* [[P_0]], !dbg !5
; ARGPROMOTION-NEXT:    [[P_1:%.*]] = getelementptr [[STRUCT_PAIR]], %struct.pair* [[P]], i32 0, i32 1, !dbg !5
; ARGPROMOTION-NEXT:    [[P_1_VAL:%.*]] = load i32, i32* [[P_1]], !dbg !5
; ARGPROMOTION-NEXT:    call void @test_byval(i32 [[P_0_VAL]], i32 [[P_1_VAL]]), !dbg !5
; ARGPROMOTION-NEXT:    ret void
;
  call void @test(i32** %Y), !dbg !1

  call void @test_byval(%struct.pair* %P), !dbg !6
  ret void
}


!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !DILocation(line: 8, scope: !2)
!2 = distinct !DISubprogram(name: "test", file: !5, line: 3, isLocal: true, isDefinition: true, virtualIndex: 6, flags: DIFlagPrototyped, isOptimized: false, unit: !3, scopeLine: 3, scope: null)
!3 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, producer: "clang version 3.5.0 ", isOptimized: false, emissionKind: LineTablesOnly, file: !5)
!5 = !DIFile(filename: "test.c", directory: "")
!6 = !DILocation(line: 9, scope: !2)
