; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt %s -globalopt -argpromotion -sroa -S | FileCheck %s --check-prefixes=ALL,ARGPROMOTION
; RUN: opt %s -passes='module(globalopt),cgscc(argpromotion),function(sroa)' -S | FileCheck %s --check-prefixes=ALL,ARGPROMOTION
; RUN: opt -S -passes='attributor' -aa-pipeline='basic-aa' -attributor-disable=false -attributor-max-iterations-verify -attributor-max-iterations=2 < %s | FileCheck %s --check-prefixes=ALL,ATTRIBUTOR

target datalayout = "E-p:64:64:64-a0:0:8-f32:32:32-f64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:32:64-v64:64:64-v128:128:128"

%struct.ss = type { i32, i32 }

; Argpromote can't promote %a because of the icmp use.
define internal i1 @g(%struct.ss* %a, %struct.ss* inalloca %b) nounwind  {
; ARGPROMOTION-LABEL: define {{[^@]+}}@g
; ARGPROMOTION-SAME: (%struct.ss* [[A:%.*]], %struct.ss* [[B:%.*]]) unnamed_addr
; ARGPROMOTION-NEXT:  entry:
; ARGPROMOTION-NEXT:    [[C:%.*]] = icmp eq %struct.ss* [[A]], [[B]]
; ARGPROMOTION-NEXT:    ret i1 [[C]]
;
entry:
  %c = icmp eq %struct.ss* %a, %b
  ret i1 %c
}

define i32 @test() {
; ARGPROMOTION-LABEL: define {{[^@]+}}@test() local_unnamed_addr
; ARGPROMOTION-NEXT:  entry:
; ARGPROMOTION-NEXT:    [[S:%.*]] = alloca inalloca [[STRUCT_SS:%.*]]
; ARGPROMOTION-NEXT:    [[C:%.*]] = call fastcc i1 @g(%struct.ss* [[S]], %struct.ss* [[S]])
; ARGPROMOTION-NEXT:    ret i32 0
;
; ATTRIBUTOR-LABEL: define {{[^@]+}}@test()
; ATTRIBUTOR-NEXT:  entry:
; ATTRIBUTOR-NEXT:    ret i32 0
;
entry:
  %S = alloca inalloca %struct.ss
  %c = call i1 @g(%struct.ss* %S, %struct.ss* inalloca %S)
  ret i32 0
}
