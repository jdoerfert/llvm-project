; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt %s -argpromotion -S -o - | FileCheck %s --check-prefix=ARGPROMOTION
; RUN: opt %s -passes=argpromotion -S -o - | FileCheck %s --check-prefix=ARGPROMOTION
; PR14710

target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"

%pair = type { i32, i32 }

declare i8* @foo(%pair*)

define internal void @bar(%pair* byval %Data) {
; ARGPROMOTION-LABEL: define {{[^@]+}}@bar
; ARGPROMOTION-SAME: (i32 [[DATA_0:%.*]], i32 [[DATA_1:%.*]])
; ARGPROMOTION-NEXT:    [[DATA:%.*]] = alloca [[PAIR:%.*]]
; ARGPROMOTION-NEXT:    [[DOT0:%.*]] = getelementptr [[PAIR]], %pair* [[DATA]], i32 0, i32 0
; ARGPROMOTION-NEXT:    store i32 [[DATA_0:%.*]], i32* [[DOT0]]
; ARGPROMOTION-NEXT:    [[DOT1:%.*]] = getelementptr [[PAIR]], %pair* [[DATA]], i32 0, i32 1
; ARGPROMOTION-NEXT:    store i32 [[DATA_1:%.*]], i32* [[DOT1]]
; ARGPROMOTION-NEXT:    [[TMP1:%.*]] = call i8* @foo(%pair* [[DATA]])
; ARGPROMOTION-NEXT:    ret void
;
  tail call i8* @foo(%pair* %Data)
  ret void
}

define void @zed(%pair* byval %Data) {
; ARGPROMOTION-LABEL: define {{[^@]+}}@zed
; ARGPROMOTION-SAME: (%pair* byval [[DATA:%.*]])
; ARGPROMOTION-NEXT:    [[DATA_0:%.*]] = getelementptr [[PAIR:%.*]], %pair* [[DATA:%.*]], i32 0, i32 0
; ARGPROMOTION-NEXT:    [[DATA_0_VAL:%.*]] = load i32, i32* [[DATA_0]]
; ARGPROMOTION-NEXT:    [[DATA_1:%.*]] = getelementptr [[PAIR]], %pair* [[DATA]], i32 0, i32 1
; ARGPROMOTION-NEXT:    [[DATA_1_VAL:%.*]] = load i32, i32* [[DATA_1]]
; ARGPROMOTION-NEXT:    call void @bar(i32 [[DATA_0_VAL]], i32 [[DATA_1_VAL]])
; ARGPROMOTION-NEXT:    ret void
;
  call void @bar(%pair* byval %Data)
  ret void
}
