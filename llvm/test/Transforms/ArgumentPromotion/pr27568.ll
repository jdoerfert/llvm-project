; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --function-signature --scrub-attributes
; RUN: opt -S -argpromotion < %s | FileCheck %s --check-prefixes=ALL,ARGPROMOTION
; RUN: opt -S -passes=argpromotion < %s | FileCheck %s --check-prefixes=ALL,ARGPROMOTION
; RUN: opt -S -passes=attributor -aa-pipeline='basic-aa' -attributor-disable=false -attributor-max-iterations-verify -attributor-max-iterations=1 < %s | FileCheck %s --check-prefixes=ALL,ATTRIBUTOR
; RUN: opt -S -debugify -o /dev/null < %s
target triple = "x86_64-pc-windows-msvc"

define internal void @callee(i8*) {
; ALL-LABEL: define {{[^@]+}}@callee()
; ALL-NEXT:  entry:
; ALL-NEXT:    call void @thunk()
; ALL-NEXT:    ret void
;
entry:
  call void @thunk()
  ret void
}

define void @test1() personality i32 (...)* @__CxxFrameHandler3 {
; ALL-LABEL: define {{[^@]+}}@test1() personality i32 (...)* @__CxxFrameHandler3
; ALL-NEXT:  entry:
; ALL-NEXT:    invoke void @thunk()
; ALL-NEXT:    to label [[OUT:%.*]] unwind label [[CPAD:%.*]]
; ALL:       out:
; ALL-NEXT:    ret void
; ALL:       cpad:
; ALL-NEXT:    [[PAD:%.*]] = cleanuppad within none []
; ALL-NEXT:    call void @callee() [ "funclet"(token [[PAD]]) ]
; ALL-NEXT:    cleanupret from [[PAD]] unwind to caller
;
entry:
  invoke void @thunk()
  to label %out unwind label %cpad

out:
  ret void

cpad:
  %pad = cleanuppad within none []
  call void @callee(i8* null) [ "funclet"(token %pad) ]
  cleanupret from %pad unwind to caller
}


declare void @thunk()

declare i32 @__CxxFrameHandler3(...)
