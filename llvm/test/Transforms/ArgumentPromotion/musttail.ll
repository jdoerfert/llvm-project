; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -argpromotion -S | FileCheck %s --check-prefix=ARGPROMOTION
; PR36543

; Don't promote arguments of musttail callee

%T = type { i32, i32, i32, i32 }

define internal i32 @test(%T* %p) {
; ARGPROMOTION-LABEL: define {{[^@]+}}@test
; ARGPROMOTION-SAME: (%T* [[P:%.*]])
; ARGPROMOTION-NEXT:    [[A_GEP:%.*]] = getelementptr [[T:%.*]], %T* [[P]], i64 0, i32 3
; ARGPROMOTION-NEXT:    [[B_GEP:%.*]] = getelementptr [[T]], %T* [[P]], i64 0, i32 2
; ARGPROMOTION-NEXT:    [[A:%.*]] = load i32, i32* [[A_GEP]]
; ARGPROMOTION-NEXT:    [[B:%.*]] = load i32, i32* [[B_GEP]]
; ARGPROMOTION-NEXT:    [[V:%.*]] = add i32 [[A]], [[B]]
; ARGPROMOTION-NEXT:    ret i32 [[V]]
;
  %a.gep = getelementptr %T, %T* %p, i64 0, i32 3
  %b.gep = getelementptr %T, %T* %p, i64 0, i32 2
  %a = load i32, i32* %a.gep
  %b = load i32, i32* %b.gep
  %v = add i32 %a, %b
  ret i32 %v
}

define i32 @caller(%T* %p) {
; ARGPROMOTION-LABEL: define {{[^@]+}}@caller
; ARGPROMOTION-SAME: (%T* [[P:%.*]])
; ARGPROMOTION-NEXT:    [[V:%.*]] = musttail call i32 @test(%T* [[P]])
; ARGPROMOTION-NEXT:    ret i32 [[V]]
;
  %v = musttail call i32 @test(%T* %p)
  ret i32 %v
}

; Don't promote arguments of musttail caller

define i32 @foo(%T* %p, i32 %v) {
; ARGPROMOTION-LABEL: define {{[^@]+}}@foo
; ARGPROMOTION-SAME: (%T* [[P:%.*]], i32 [[V:%.*]])
; ARGPROMOTION-NEXT:    ret i32 0
;
  ret i32 0
}

define internal i32 @test2(%T* %p, i32 %p2) {
; ARGPROMOTION-LABEL: define {{[^@]+}}@test2
; ARGPROMOTION-SAME: (%T* [[P:%.*]], i32 [[P2:%.*]])
; ARGPROMOTION-NEXT:    [[A_GEP:%.*]] = getelementptr [[T:%.*]], %T* [[P]], i64 0, i32 3
; ARGPROMOTION-NEXT:    [[B_GEP:%.*]] = getelementptr [[T]], %T* [[P]], i64 0, i32 2
; ARGPROMOTION-NEXT:    [[A:%.*]] = load i32, i32* [[A_GEP]]
; ARGPROMOTION-NEXT:    [[B:%.*]] = load i32, i32* [[B_GEP]]
; ARGPROMOTION-NEXT:    [[V:%.*]] = add i32 [[A]], [[B]]
; ARGPROMOTION-NEXT:    [[CA:%.*]] = musttail call i32 @foo(%T* undef, i32 [[V]])
; ARGPROMOTION-NEXT:    ret i32 [[CA]]
;
  %a.gep = getelementptr %T, %T* %p, i64 0, i32 3
  %b.gep = getelementptr %T, %T* %p, i64 0, i32 2
  %a = load i32, i32* %a.gep
  %b = load i32, i32* %b.gep
  %v = add i32 %a, %b
  %ca = musttail call i32 @foo(%T* undef, i32 %v)
  ret i32 %ca
}

define i32 @caller2(%T* %g) {
; ARGPROMOTION-LABEL: define {{[^@]+}}@caller2
; ARGPROMOTION-SAME: (%T* [[G:%.*]])
; ARGPROMOTION-NEXT:    [[V:%.*]] = call i32 @test2(%T* [[G]], i32 0)
; ARGPROMOTION-NEXT:    ret i32 [[V]]
;
  %v = call i32 @test2(%T* %g, i32 0)
  ret i32 %v
}
