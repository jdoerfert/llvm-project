; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -argpromotion -sroa -S | FileCheck %s --check-prefixes=ALL,ARGPROMOTION
; RUN: opt < %s -passes='argpromotion,function(sroa)' -S | FileCheck %s --check-prefixes=ALL,ARGPROMOTION
; RUN: opt -S -passes='attributor,function(sroa)' -aa-pipeline='basic-aa' -attributor-disable=false -attributor-max-iterations-verify -attributor-max-iterations=1 < %s | FileCheck %s --check-prefixes=ALL,ATTRIBUTOR

target datalayout = "E-p:64:64:64-a0:0:8-f32:32:32-f64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:32:64-v64:64:64-v128:128:128"

%struct.ss = type { i32, i64 }

define internal void @f(%struct.ss* byval  %b) nounwind  {
; ALL-LABEL: define {{[^@]+}}@f
; ALL-SAME: (i32 [[TMP0:%.*]], i64 [[TMP1:%.*]])
; ALL-NEXT:  entry:
; ALL-NEXT:    [[TMP2:%.*]] = add i32 [[TMP0:%.*]], 1
; ALL-NEXT:    ret void
;
entry:
  %tmp = getelementptr %struct.ss, %struct.ss* %b, i32 0, i32 0
  %tmp1 = load i32, i32* %tmp, align 4
  %tmp2 = add i32 %tmp1, 1
  store i32 %tmp2, i32* %tmp, align 4
  ret void
}


define internal void @g(%struct.ss* byval align 32 %b) nounwind {
; ALL-LABEL: define {{[^@]+}}@g
; ALL-SAME: (i32 [[TMP0:%.*]], i64 [[TMP1:%.*]])
; ALL-NEXT:  entry:
; ALL-NEXT:    [[TMP2:%.*]] = add i32 [[TMP0:%.*]], 1
; ALL-NEXT:    ret void
;
entry:
  %tmp = getelementptr %struct.ss, %struct.ss* %b, i32 0, i32 0
  %tmp1 = load i32, i32* %tmp, align 4
  %tmp2 = add i32 %tmp1, 1
  store i32 %tmp2, i32* %tmp, align 4
  ret void
}


define i32 @main() nounwind  {
; ALL-LABEL: define {{[^@]+}}@main()
; ALL-NEXT:  entry:
; ALL-NEXT:    call void @f(i32 1, i64 2)
; ALL-NEXT:    call void @g(i32 1, i64 2)
; ALL-NEXT:    ret i32 0
;
entry:
  %S = alloca %struct.ss
  %tmp1 = getelementptr %struct.ss, %struct.ss* %S, i32 0, i32 0
  store i32 1, i32* %tmp1, align 8
  %tmp4 = getelementptr %struct.ss, %struct.ss* %S, i32 0, i32 1
  store i64 2, i64* %tmp4, align 4
  call void @f(%struct.ss* byval %S) nounwind
  call void @g(%struct.ss* byval %S) nounwind
  ret i32 0
}


