; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -argpromotion -S | FileCheck %s --check-prefixes=ALL,ARGPROMOTION
; RUN: opt < %s -passes=argpromotion -S | FileCheck %s --check-prefixes=ALL,ARGPROMOTION
; RUN: opt -S -passes=attributor -aa-pipeline='basic-aa' -attributor-disable=false -attributor-max-iterations-verify -attributor-max-iterations=1 < %s | FileCheck %s --check-prefixes=ALL,ATTRIBUTOR

; Arg promotion eliminates the struct argument.
; FIXME: Should it eliminate the i32* argument?
; The attributor eliminates the i32*.

%struct.ss = type { i32, i64 }

define internal void @f(%struct.ss* byval  %b, i32* byval %X) nounwind  {
; ARGPROMOTION-LABEL: define {{[^@]+}}@f
; ARGPROMOTION-SAME: (i32 [[B_0:%.*]], i64 [[B_1:%.*]], i32* byval [[X:%.*]])
; ARGPROMOTION-NEXT:  entry:
; ARGPROMOTION-NEXT:    [[B:%.*]] = alloca [[STRUCT_SS:%.*]]
; ARGPROMOTION-NEXT:    [[DOT0:%.*]] = getelementptr [[STRUCT_SS]], %struct.ss* [[B]], i32 0, i32 0
; ARGPROMOTION-NEXT:    store i32 [[B_0]], i32* [[DOT0]]
; ARGPROMOTION-NEXT:    [[DOT1:%.*]] = getelementptr [[STRUCT_SS]], %struct.ss* [[B]], i32 0, i32 1
; ARGPROMOTION-NEXT:    store i64 [[B_1]], i64* [[DOT1]]
; ARGPROMOTION-NEXT:    [[TMP:%.*]] = getelementptr [[STRUCT_SS]], %struct.ss* [[B]], i32 0, i32 0
; ARGPROMOTION-NEXT:    [[TMP1:%.*]] = load i32, i32* [[TMP]], align 4
; ARGPROMOTION-NEXT:    [[TMP2:%.*]] = add i32 [[TMP1]], 1
; ARGPROMOTION-NEXT:    store i32 [[TMP2]], i32* [[TMP]], align 4
; ARGPROMOTION-NEXT:    store i32 0, i32* [[X]]
; ARGPROMOTION-NEXT:    ret void
;
; ATTRIBUTOR-LABEL: define {{[^@]+}}@f
; ATTRIBUTOR-SAME: (i32 [[TMP0:%.*]], i64 [[TMP1:%.*]], i32 [[TMP2:%.*]])
; ATTRIBUTOR-NEXT:  entry:
; ATTRIBUTOR-NEXT:    [[X_PRIV:%.*]] = alloca i32
; ATTRIBUTOR-NEXT:    store i32 [[TMP2]], i32* [[X_PRIV]]
; ATTRIBUTOR-NEXT:    [[B_PRIV:%.*]] = alloca [[STRUCT_SS:%.*]]
; ATTRIBUTOR-NEXT:    [[B_PRIV_CAST:%.*]] = bitcast %struct.ss* [[B_PRIV]] to i32*
; ATTRIBUTOR-NEXT:    store i32 [[TMP0]], i32* [[B_PRIV_CAST]]
; ATTRIBUTOR-NEXT:    [[B_PRIV_0_1:%.*]] = getelementptr [[STRUCT_SS]], %struct.ss* [[B_PRIV]], i32 0, i32 1
; ATTRIBUTOR-NEXT:    store i64 [[TMP1]], i64* [[B_PRIV_0_1]]
; ATTRIBUTOR-NEXT:    [[TMP:%.*]] = getelementptr [[STRUCT_SS]], %struct.ss* [[B_PRIV]], i32 0, i32 0
; ATTRIBUTOR-NEXT:    [[TMP1:%.*]] = load i32, i32* [[TMP]], align 8
; ATTRIBUTOR-NEXT:    [[TMP2:%.*]] = add i32 [[TMP1]], 1
; ATTRIBUTOR-NEXT:    store i32 [[TMP2]], i32* [[TMP]], align 8
; ATTRIBUTOR-NEXT:    store i32 0, i32* [[X_PRIV]]
; ATTRIBUTOR-NEXT:    ret void
;
entry:
  %tmp = getelementptr %struct.ss, %struct.ss* %b, i32 0, i32 0
  %tmp1 = load i32, i32* %tmp, align 4
  %tmp2 = add i32 %tmp1, 1
  store i32 %tmp2, i32* %tmp, align 4

  store i32 0, i32* %X
  ret void
}

define i32 @test(i32* %X) {
; ARGPROMOTION-LABEL: define {{[^@]+}}@test
; ARGPROMOTION-SAME: (i32* [[X:%.*]])
; ARGPROMOTION-NEXT:  entry:
; ARGPROMOTION-NEXT:    [[S:%.*]] = alloca [[STRUCT_SS:%.*]]
; ARGPROMOTION-NEXT:    [[TMP1:%.*]] = getelementptr [[STRUCT_SS]], %struct.ss* [[S]], i32 0, i32 0
; ARGPROMOTION-NEXT:    store i32 1, i32* [[TMP1]], align 8
; ARGPROMOTION-NEXT:    [[TMP4:%.*]] = getelementptr [[STRUCT_SS]], %struct.ss* [[S]], i32 0, i32 1
; ARGPROMOTION-NEXT:    store i64 2, i64* [[TMP4]], align 4
; ARGPROMOTION-NEXT:    [[S_0:%.*]] = getelementptr [[STRUCT_SS]], %struct.ss* [[S]], i32 0, i32 0
; ARGPROMOTION-NEXT:    [[S_0_VAL:%.*]] = load i32, i32* [[S_0]]
; ARGPROMOTION-NEXT:    [[S_1:%.*]] = getelementptr [[STRUCT_SS]], %struct.ss* [[S]], i32 0, i32 1
; ARGPROMOTION-NEXT:    [[S_1_VAL:%.*]] = load i64, i64* [[S_1]]
; ARGPROMOTION-NEXT:    call void @f(i32 [[S_0_VAL]], i64 [[S_1_VAL]], i32* byval [[X]])
; ARGPROMOTION-NEXT:    ret i32 0
;
; ATTRIBUTOR-LABEL: define {{[^@]+}}@test
; ATTRIBUTOR-SAME: (i32* nocapture writeonly [[X:%.*]])
; ATTRIBUTOR-NEXT:  entry:
; ATTRIBUTOR-NEXT:    [[S:%.*]] = alloca [[STRUCT_SS:%.*]]
; ATTRIBUTOR-NEXT:    [[TMP1:%.*]] = getelementptr [[STRUCT_SS]], %struct.ss* [[S]], i32 0, i32 0
; ATTRIBUTOR-NEXT:    store i32 1, i32* [[TMP1]], align 8
; ATTRIBUTOR-NEXT:    [[TMP4:%.*]] = getelementptr [[STRUCT_SS]], %struct.ss* [[S]], i32 0, i32 1
; ATTRIBUTOR-NEXT:    store i64 2, i64* [[TMP4]], align 4
; ATTRIBUTOR-NEXT:    [[S_CAST:%.*]] = bitcast %struct.ss* [[S]] to i32*
; ATTRIBUTOR-NEXT:    [[TMP0:%.*]] = load i32, i32* [[S_CAST]]
; ATTRIBUTOR-NEXT:    [[S_0_1:%.*]] = getelementptr [[STRUCT_SS]], %struct.ss* [[S]], i32 0, i32 1
; ATTRIBUTOR-NEXT:    [[TMP1:%.*]] = load i64, i64* [[S_0_1]]
; ATTRIBUTOR-NEXT:    [[TMP2:%.*]] = load i32, i32* [[X]]
; ATTRIBUTOR-NEXT:    call void @f(i32 [[TMP0]], i64 [[TMP1]], i32 [[TMP2]])
; ATTRIBUTOR-NEXT:    ret i32 0
;
entry:
  %S = alloca %struct.ss
  %tmp1 = getelementptr %struct.ss, %struct.ss* %S, i32 0, i32 0
  store i32 1, i32* %tmp1, align 8
  %tmp4 = getelementptr %struct.ss, %struct.ss* %S, i32 0, i32 1
  store i64 2, i64* %tmp4, align 4
  call void @f( %struct.ss* byval %S, i32* byval %X)
  ret i32 0
}
