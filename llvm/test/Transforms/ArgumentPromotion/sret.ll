; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -argpromotion -S | FileCheck %s --check-prefixes=ALL,ARGPROMOTION
; RUN: opt < %s -passes=argpromotion -S | FileCheck %s --check-prefixes=ALL,ARGPROMOTION
; RUN: opt -S -passes=attributor -aa-pipeline='basic-aa' -attributor-disable=false -attributor-max-iterations-verify -attributor-max-iterations=1 < %s | FileCheck %s --check-prefixes=ALL,ATTRIBUTOR

target datalayout = "e-m:w-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-windows-msvc"

define internal void @add({i32, i32}* %this, i32* sret %r) {
; ARGPROMOTION-LABEL: define {{[^@]+}}@add
; ARGPROMOTION-SAME: (i32 [[THIS_0_0_VAL:%.*]], i32 [[THIS_0_1_VAL:%.*]], i32* noalias [[R:%.*]])
; ARGPROMOTION-NEXT:    [[AB:%.*]] = add i32 [[THIS_0_0_VAL:%.*]], [[THIS_0_1_VAL:%.*]]
; ARGPROMOTION-NEXT:    store i32 [[AB]], i32* [[R:%.*]]
; ARGPROMOTION-NEXT:    ret void
;
; ATTRIBUTOR-LABEL: define {{[^@]+}}@add
; ATTRIBUTOR-SAME: ({ i32, i32 }* noalias nocapture nonnull readonly align 8 dereferenceable(8) [[THIS:%.*]], i32* noalias nocapture nonnull sret writeonly align 4 dereferenceable(4) [[R:%.*]])
; ATTRIBUTOR-NEXT:    [[AP:%.*]] = getelementptr { i32, i32 }, { i32, i32 }* [[THIS:%.*]], i32 0, i32 0
; ATTRIBUTOR-NEXT:    [[BP:%.*]] = getelementptr { i32, i32 }, { i32, i32 }* [[THIS]], i32 0, i32 1
; ATTRIBUTOR-NEXT:    [[A:%.*]] = load i32, i32* [[AP]], align 8
; ATTRIBUTOR-NEXT:    [[B:%.*]] = load i32, i32* [[BP]]
; ATTRIBUTOR-NEXT:    [[AB:%.*]] = add i32 [[A]], [[B]]
; ATTRIBUTOR-NEXT:    store i32 [[AB]], i32* [[R:%.*]], align 4
; ATTRIBUTOR-NEXT:    ret void
;
  %ap = getelementptr {i32, i32}, {i32, i32}* %this, i32 0, i32 0
  %bp = getelementptr {i32, i32}, {i32, i32}* %this, i32 0, i32 1
  %a = load i32, i32* %ap
  %b = load i32, i32* %bp
  %ab = add i32 %a, %b
  store i32 %ab, i32* %r
  ret void
}

define void @f() {
; ARGPROMOTION-LABEL: define {{[^@]+}}@f()
; ARGPROMOTION-NEXT:    [[R:%.*]] = alloca i32
; ARGPROMOTION-NEXT:    [[PAIR:%.*]] = alloca { i32, i32 }
; ARGPROMOTION-NEXT:    [[PAIR_IDX:%.*]] = getelementptr { i32, i32 }, { i32, i32 }* [[PAIR]], i64 0, i32 0
; ARGPROMOTION-NEXT:    [[PAIR_IDX_VAL:%.*]] = load i32, i32* [[PAIR_IDX]]
; ARGPROMOTION-NEXT:    [[PAIR_IDX1:%.*]] = getelementptr { i32, i32 }, { i32, i32 }* [[PAIR]], i64 0, i32 1
; ARGPROMOTION-NEXT:    [[PAIR_IDX1_VAL:%.*]] = load i32, i32* [[PAIR_IDX1]]
; ARGPROMOTION-NEXT:    call void @add(i32 [[PAIR_IDX_VAL]], i32 [[PAIR_IDX1_VAL]], i32* noalias [[R]])
; ARGPROMOTION-NEXT:    ret void
;
; ATTRIBUTOR-LABEL: define {{[^@]+}}@f()
; ATTRIBUTOR-NEXT:    [[R:%.*]] = alloca i32
; ATTRIBUTOR-NEXT:    [[PAIR:%.*]] = alloca { i32, i32 }
; ATTRIBUTOR-NEXT:    call void @add({ i32, i32 }* noalias nocapture nonnull readonly align 8 dereferenceable(8) [[PAIR]], i32* noalias nocapture nonnull sret writeonly align 4 dereferenceable(4) [[R]])
; ATTRIBUTOR-NEXT:    ret void
;
  %r = alloca i32
  %pair = alloca {i32, i32}

  call void @add({i32, i32}* %pair, i32* sret %r)
  ret void
}
