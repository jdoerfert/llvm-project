; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -basicaa -argpromotion -mem2reg -S | FileCheck %s --check-prefixes=ALL,ARGPROMOTION
; RUN: opt -S -passes='attributor,function(mem2reg)' -aa-pipeline='basic-aa' -attributor-disable=false -attributor-max-iterations-verify -attributor-max-iterations=4 < %s | FileCheck %s --check-prefixes=ALL,ATTRIBUTOR
target datalayout = "E-p:64:64:64-a0:0:8-f32:32:32-f64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:32:64-v64:64:64-v128:128:128"

define internal i32 @test(i32* %X, i32* %Y) {
; ALL-LABEL: define {{[^@]+}}@test
; ALL-SAME: (i32 [[TMP0:%.*]], i32 [[TMP1:%.*]])
; ALL-NEXT:    [[C:%.*]] = add i32 [[TMP0]], [[TMP1]]
; ALL-NEXT:    ret i32 [[C]]
;
  %A = load i32, i32* %X
  %B = load i32, i32* %Y
  %C = add i32 %A, %B
  ret i32 %C
}

define internal i32 @caller(i32* %B) {
; ALL-LABEL: define {{[^@]+}}@caller
; ALL-SAME: (i32 [[TMP0:%.*]])
; ALL-NEXT:    [[C:%.*]] = call i32 @test(i32 1, i32 [[TMP0]])
; ALL-NEXT:    ret i32 [[C]]
;
  %A = alloca i32
  store i32 1, i32* %A
  %C = call i32 @test(i32* %A, i32* %B)
  ret i32 %C
}

define i32 @callercaller() {
; ALL-LABEL: define {{[^@]+}}@callercaller()
; ALL-NEXT:    [[X:%.*]] = call i32 @caller(i32 2)
; ALL-NEXT:    ret i32 [[X]]
;
  %B = alloca i32
  store i32 2, i32* %B
  %X = call i32 @caller(i32* %B)
  ret i32 %X
}

