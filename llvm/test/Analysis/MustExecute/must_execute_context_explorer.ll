; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -disable-output -print-mustexecute %s 2>&1 | FileCheck %s --check-prefixes=BOTH,SLSI
; RUN: opt -disable-output -print-mustexecute -print-mustexecute-use-explorer %s 2>&1 | FileCheck %s --check-prefixes=BOTH,ELSI

; int A, B, C, D, E, F, G;
;
; void foo(int c) {
;   A = 0;
;   while (1) {
;     B = 1;
;     if (c)
;       C = 2;
;     if (c)       // endless for c != 0
;       continue;
;     D = 3;
;     if (--c)
;       break;
;     do {
;       if (c++)
;         continue;
;       E = 4;
;     } while (c++);
;     F = 5;
;   }
;   G = 6;
; }

target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"

@A = common global i32 0, align 4
@B = common global i32 0, align 4
@C = common global i32 0, align 4
@D = common global i32 0, align 4
@E = common global i32 0, align 4
@F = common global i32 0, align 4
@G = common global i32 0, align 4

define void @foo(i32 %arg) {
; SLSI-LABEL: @foo(
; SLSI-NEXT:  BB_A:
; SLSI-NEXT:    store i32 0, i32* @A, align 4 ; no mustexec loop
; SLSI-NEXT:    br label [[LOOPOUTER:%.*]] ; no mustexec loop
; SLSI:       LoopOuter: ; preds = [[BB_F:%.*]], [[BB10:%.*]], [[BB_A:%.*]]
; SLSI-NEXT:    [[DOT0:%.*]] = phi i32 [ [[ARG:%.*]], [[BB_A]] ], [ [[TMP29:%.*]], [[BB_F]] ], [ [[ARG]], [[BB10]] ] ; (mustexec in: LoopOuter)
; SLSI-NEXT:    store i32 1, i32* @B, align 4 ; (mustexec in: LoopOuter)
; SLSI-NEXT:    [[TMP6:%.*]] = icmp ne i32 [[ARG]], 0 ; (mustexec in: LoopOuter)
; SLSI-NEXT:    br label [[BB10]] ; (mustexec in: LoopOuter)
; SLSI:       bb10: ; preds = [[LOOPOUTER]]
; SLSI-NEXT:    [[TMP12:%.*]] = icmp ne i32 [[ARG]], 0 ; (mustexec in: LoopOuter)
; SLSI-NEXT:    br i1 [[TMP12]], label [[LOOPOUTER]], label [[BB_D:%.*]] ; (mustexec in: LoopOuter)
; SLSI:       BB_D: ; preds = [[BB10]]
; FIXME the following four lines are not correct ( https://llvm.org/PR42682 )
; SLSI-NEXT:    store i32 3, i32* @D, align 4 ; (mustexec in: LoopOuter)
; SLSI-NEXT:    [[TMP17:%.*]] = add nsw i32 [[DOT0]], -1 ; (mustexec in: LoopOuter)
; SLSI-NEXT:    [[TMP18:%.*]] = icmp ne i32 [[TMP17]], 0 ; (mustexec in: LoopOuter)
; SLSI-NEXT:    br i1 [[TMP18]], label [[BB_G:%.*]], label [[LOOPINNER:%.*]] ; (mustexec in: LoopOuter)
; SLSI:       LoopInner: ; preds = [[BB22:%.*]], [[BB_D]]
; SLSI-NEXT:    [[DOT1:%.*]] = phi i32 [ [[TMP29]], [[BB22]] ], [ [[TMP17]], [[BB_D]] ] ; (mustexec in: LoopInner)
; SLSI-NEXT:    [[TMP22:%.*]] = add nsw i32 [[DOT1]], 1 ; (mustexec in: LoopInner)
; SLSI-NEXT:    [[TMP23:%.*]] = icmp ne i32 [[DOT1]], 0 ; (mustexec in: LoopInner)
; SLSI-NEXT:    br i1 [[TMP23]], label [[BB22]], label [[BB_E:%.*]] ; (mustexec in: LoopInner)
; SLSI:       BB_E: ; preds = [[LOOPINNER]]
; SLSI-NEXT:    store i32 4, i32* @E, align 4 ; no mustexec loop
; SLSI-NEXT:    br label [[BB22]] ; no mustexec loop
; SLSI:       bb22: ; preds = [[BB_E]], [[LOOPINNER]]
; SLSI-NEXT:    [[TMP29]] = add nsw i32 [[TMP22]], 1 ; (mustexec in: LoopInner)
; SLSI-NEXT:    [[TMP30:%.*]] = icmp ne i32 [[TMP22]], 0 ; (mustexec in: LoopInner)
; SLSI-NEXT:    br i1 [[TMP30]], label [[LOOPINNER]], label [[BB_F]] ; (mustexec in: LoopInner)
; SLSI:       BB_F: ; preds = [[BB22]]
; SLSI-NEXT:    store i32 5, i32* @F, align 4 ; no mustexec loop
; SLSI-NEXT:    br label [[LOOPOUTER]] ; no mustexec loop
; SLSI:       BB_G: ; preds = [[BB_D]]
; SLSI-NEXT:    store i32 6, i32* @G, align 4 ; no mustexec loop
; SLSI-NEXT:    ret void ; no mustexec loop
;
; ELSI-LABEL: @foo(
; ELSI-NEXT:  BB_A:
; ELSI-NEXT:    store i32 0, i32* @A, align 4 ; no mustexec loop
; ELSI-NEXT:    br label [[LOOPOUTER:%.*]] ; no mustexec loop
; ELSI:       LoopOuter: ; preds = [[BB_F:%.*]], [[BB10:%.*]], [[BB_A:%.*]]
; ELSI-NEXT:    [[DOT0:%.*]] = phi i32 [ [[ARG:%.*]], [[BB_A]] ], [ [[TMP29:%.*]], [[BB_F]] ], [ [[ARG]], [[BB10]] ] ; (mustexec in: LoopOuter)
; ELSI-NEXT:    store i32 1, i32* @B, align 4 ; (mustexec in: LoopOuter)
; ELSI-NEXT:    [[TMP6:%.*]] = icmp ne i32 [[ARG]], 0 ; (mustexec in: LoopOuter)
; ELSI-NEXT:    br label [[BB10]] ; (mustexec in: LoopOuter)
; ELSI:       bb10: ; preds = [[LOOPOUTER]]
; ELSI-NEXT:    [[TMP12:%.*]] = icmp ne i32 [[ARG]], 0 ; (mustexec in: LoopOuter)
; ELSI-NEXT:    br i1 [[TMP12]], label [[LOOPOUTER]], label [[BB_D:%.*]] ; (mustexec in: LoopOuter)
; ELSI:       BB_D: ; preds = [[BB10]]
; ELSI-NEXT:    store i32 3, i32* @D, align 4 ; no mustexec loop
; ELSI-NEXT:    [[TMP17:%.*]] = add nsw i32 [[DOT0]], -1 ; no mustexec loop
; ELSI-NEXT:    [[TMP18:%.*]] = icmp ne i32 [[TMP17]], 0 ; no mustexec loop
; ELSI-NEXT:    br i1 [[TMP18]], label [[BB_G:%.*]], label [[LOOPINNER:%.*]] ; no mustexec loop
; ELSI:       LoopInner: ; preds = [[BB22:%.*]], [[BB_D]]
; ELSI-NEXT:    [[DOT1:%.*]] = phi i32 [ [[TMP29]], [[BB22]] ], [ [[TMP17]], [[BB_D]] ] ; (mustexec in: LoopInner)
; ELSI-NEXT:    [[TMP22:%.*]] = add nsw i32 [[DOT1]], 1 ; (mustexec in: LoopInner)
; ELSI-NEXT:    [[TMP23:%.*]] = icmp ne i32 [[DOT1]], 0 ; (mustexec in: LoopInner)
; ELSI-NEXT:    br i1 [[TMP23]], label [[BB22]], label [[BB_E:%.*]] ; (mustexec in: LoopInner)
; ELSI:       BB_E: ; preds = [[LOOPINNER]]
; ELSI-NEXT:    store i32 4, i32* @E, align 4 ; no mustexec loop
; ELSI-NEXT:    br label [[BB22]] ; no mustexec loop
; ELSI:       bb22: ; preds = [[BB_E]], [[LOOPINNER]]
; ELSI-NEXT:    [[TMP29]] = add nsw i32 [[TMP22]], 1 ; (mustexec in: LoopInner)
; ELSI-NEXT:    [[TMP30:%.*]] = icmp ne i32 [[TMP22]], 0 ; (mustexec in: LoopInner)
; ELSI-NEXT:    br i1 [[TMP30]], label [[LOOPINNER]], label [[BB_F]] ; (mustexec in: LoopInner)
; ELSI:       BB_F: ; preds = [[BB22]]
; ELSI-NEXT:    store i32 5, i32* @F, align 4 ; no mustexec loop
; ELSI-NEXT:    br label [[LOOPOUTER]] ; no mustexec loop
; ELSI:       BB_G: ; preds = [[BB_D]]
; ELSI-NEXT:    store i32 6, i32* @G, align 4 ; no mustexec loop
; ELSI-NEXT:    ret void ; no mustexec loop
;
BB_A:
  store i32 0, i32* @A, align 4
  br label %LoopOuter

LoopOuter:                                        ; preds = %bb10, %BB_F, %BB_A
  %.0 = phi i32 [ %arg, %BB_A ], [ %tmp29, %BB_F ], [ %arg, %bb10 ]
  store i32 1, i32* @B, align 4
  %tmp6 = icmp ne i32 %arg, 0
  br label %bb10

bb10:                                             ; preds = %BB_C, %LoopOuter
  %tmp12 = icmp ne i32 %arg, 0
  br i1 %tmp12, label %LoopOuter, label %BB_D

BB_D:                                             ; preds = %bb10
  store i32 3, i32* @D, align 4
  %tmp17 = add nsw i32 %.0, -1
  %tmp18 = icmp ne i32 %tmp17, 0
  br i1 %tmp18, label %BB_G, label %LoopInner

LoopInner:                                        ; preds = %BB_D, %bb22
  %.1 = phi i32 [ %tmp29, %bb22 ], [ %tmp17, %BB_D ]
  %tmp22 = add nsw i32 %.1, 1
  %tmp23 = icmp ne i32 %.1, 0
  br i1 %tmp23, label %bb22, label %BB_E

BB_E:                                             ; preds = %LoopInner
  store i32 4, i32* @E, align 4
  br label %bb22

bb22:                                             ; preds = %LoopInner, %BB_E
  %tmp29 = add nsw i32 %tmp22, 1
  %tmp30 = icmp ne i32 %tmp22, 0
  br i1 %tmp30, label %LoopInner, label %BB_F

BB_F:                                             ; preds = %bb22
  store i32 5, i32* @F, align 4
  br label %LoopOuter

BB_G:                                             ; preds = %BB_D
  store i32 6, i32* @G, align 4
  ret void
}

; Function Attrs: willreturn
define void @foo_willreturn(i32 %arg) willreturn {
; SLSI-LABEL: @foo_willreturn(
; SLSI-NEXT:  BB_A:
; SLSI-NEXT:    store i32 0, i32* @A, align 4 ; no mustexec loop
; SLSI-NEXT:    br label [[LOOPOUTER:%.*]] ; no mustexec loop
; SLSI:       LoopOuter: ; preds = [[BB_F:%.*]], [[BB10:%.*]], [[BB_A:%.*]]
; SLSI-NEXT:    [[DOT0:%.*]] = phi i32 [ [[ARG:%.*]], [[BB_A]] ], [ [[TMP29:%.*]], [[BB_F]] ], [ [[TMP11:%.*]], [[BB10]] ] ; (mustexec in: LoopOuter)
; SLSI-NEXT:    store i32 1, i32* @B, align 4 ; (mustexec in: LoopOuter)
; SLSI-NEXT:    [[TMP5:%.*]] = add nsw i32 [[DOT0]], 1 ; (mustexec in: LoopOuter)
; SLSI-NEXT:    [[TMP6:%.*]] = icmp ne i32 [[DOT0]], 0 ; (mustexec in: LoopOuter)
; SLSI-NEXT:    br i1 [[TMP6]], label [[BB_C:%.*]], label [[BB10]] ; (mustexec in: LoopOuter)
; SLSI:       BB_C: ; preds = [[LOOPOUTER]]
; SLSI-NEXT:    store i32 2, i32* @C, align 4 ; no mustexec loop
; SLSI-NEXT:    br label [[BB10]] ; no mustexec loop
; SLSI:       bb10: ; preds = [[BB_C]], [[LOOPOUTER]]
; SLSI-NEXT:    [[TMP11]] = add nsw i32 [[TMP5]], 1 ; (mustexec in: LoopOuter)
; SLSI-NEXT:    [[TMP12:%.*]] = icmp ne i32 [[TMP5]], 0 ; (mustexec in: LoopOuter)
; SLSI-NEXT:    br i1 [[TMP12]], label [[LOOPOUTER]], label [[BB_D:%.*]] ; (mustexec in: LoopOuter)
; SLSI:       BB_D: ; preds = [[BB10]]
; SLSI-NEXT:    store i32 3, i32* @D, align 4 ; (mustexec in: LoopOuter)
; SLSI-NEXT:    [[TMP17:%.*]] = add nsw i32 [[TMP11]], 1 ; (mustexec in: LoopOuter)
; SLSI-NEXT:    [[TMP18:%.*]] = icmp ne i32 [[TMP11]], 0 ; (mustexec in: LoopOuter)
; SLSI-NEXT:    br i1 [[TMP18]], label [[BB_G:%.*]], label [[LOOPINNER:%.*]] ; (mustexec in: LoopOuter)
; SLSI:       LoopInner: ; preds = [[BB22:%.*]], [[BB_D]]
; SLSI-NEXT:    [[DOT1:%.*]] = phi i32 [ [[TMP29]], [[BB22]] ], [ [[TMP17]], [[BB_D]] ] ; (mustexec in: LoopInner)
; SLSI-NEXT:    [[TMP22:%.*]] = add nsw i32 [[DOT1]], 1 ; (mustexec in: LoopInner)
; SLSI-NEXT:    [[TMP23:%.*]] = icmp ne i32 [[DOT1]], 0 ; (mustexec in: LoopInner)
; SLSI-NEXT:    br i1 [[TMP23]], label [[BB22]], label [[BB_E:%.*]] ; (mustexec in: LoopInner)
; SLSI:       BB_E: ; preds = [[LOOPINNER]]
; SLSI-NEXT:    store i32 4, i32* @E, align 4 ; no mustexec loop
; SLSI-NEXT:    br label [[BB22]] ; no mustexec loop
; SLSI:       bb22: ; preds = [[BB_E]], [[LOOPINNER]]
; SLSI-NEXT:    [[TMP29]] = add nsw i32 [[TMP22]], 1 ; (mustexec in: LoopInner)
; SLSI-NEXT:    [[TMP30:%.*]] = icmp ne i32 [[TMP22]], 0 ; (mustexec in: LoopInner)
; SLSI-NEXT:    br i1 [[TMP30]], label [[LOOPINNER]], label [[BB_F]] ; (mustexec in: LoopInner)
; SLSI:       BB_F: ; preds = [[BB22]]
; SLSI-NEXT:    store i32 5, i32* @F, align 4 ; no mustexec loop
; SLSI-NEXT:    br label [[LOOPOUTER]] ; no mustexec loop
; SLSI:       BB_G: ; preds = [[BB_D]]
; SLSI-NEXT:    store i32 6, i32* @G, align 4 ; no mustexec loop
; SLSI-NEXT:    ret void ; no mustexec loop
;
; ELSI-LABEL: @foo_willreturn(
; ELSI-NEXT:  BB_A:
; ELSI-NEXT:    store i32 0, i32* @A, align 4 ; no mustexec loop
; ELSI-NEXT:    br label [[LOOPOUTER:%.*]] ; no mustexec loop
; ELSI:       LoopOuter: ; preds = [[BB_F:%.*]], [[BB10:%.*]], [[BB_A:%.*]]
; ELSI-NEXT:    [[DOT0:%.*]] = phi i32 [ [[ARG:%.*]], [[BB_A]] ], [ [[TMP29:%.*]], [[BB_F]] ], [ [[TMP11:%.*]], [[BB10]] ] ; (mustexec in: LoopOuter)
; ELSI-NEXT:    store i32 1, i32* @B, align 4 ; (mustexec in: LoopOuter)
; ELSI-NEXT:    [[TMP5:%.*]] = add nsw i32 [[DOT0]], 1 ; (mustexec in: LoopOuter)
; ELSI-NEXT:    [[TMP6:%.*]] = icmp ne i32 [[DOT0]], 0 ; (mustexec in: LoopOuter)
; ELSI-NEXT:    br i1 [[TMP6]], label [[BB_C:%.*]], label [[BB10]] ; (mustexec in: LoopOuter)
; ELSI:       BB_C: ; preds = [[LOOPOUTER]]
; ELSI-NEXT:    store i32 2, i32* @C, align 4 ; no mustexec loop
; ELSI-NEXT:    br label [[BB10]] ; no mustexec loop
; ELSI:       bb10: ; preds = [[BB_C]], [[LOOPOUTER]]
; ELSI-NEXT:    [[TMP11]] = add nsw i32 [[TMP5]], 1 ; (mustexec in: LoopOuter)
; ELSI-NEXT:    [[TMP12:%.*]] = icmp ne i32 [[TMP5]], 0 ; (mustexec in: LoopOuter)
; ELSI-NEXT:    br i1 [[TMP12]], label [[LOOPOUTER]], label [[BB_D:%.*]] ; (mustexec in: LoopOuter)
; ELSI:       BB_D: ; preds = [[BB10]]
; FIXME the following four lines could be improved (nothrow is known up to this point)
; ELSI-NEXT:    store i32 3, i32* @D, align 4 ; no mustexec loop
; ELSI-NEXT:    [[TMP17:%.*]] = add nsw i32 [[TMP11]], 1 ; no mustexec loop
; ELSI-NEXT:    [[TMP18:%.*]] = icmp ne i32 [[TMP11]], 0 ; no mustexec loop
; ELSI-NEXT:    br i1 [[TMP18]], label [[BB_G:%.*]], label [[LOOPINNER:%.*]] ; no mustexec loop
; ELSI:       LoopInner: ; preds = [[BB22:%.*]], [[BB_D]]
; ELSI-NEXT:    [[DOT1:%.*]] = phi i32 [ [[TMP29]], [[BB22]] ], [ [[TMP17]], [[BB_D]] ] ; (mustexec in: LoopInner)
; ELSI-NEXT:    [[TMP22:%.*]] = add nsw i32 [[DOT1]], 1 ; (mustexec in: LoopInner)
; ELSI-NEXT:    [[TMP23:%.*]] = icmp ne i32 [[DOT1]], 0 ; (mustexec in: LoopInner)
; ELSI-NEXT:    br i1 [[TMP23]], label [[BB22]], label [[BB_E:%.*]] ; (mustexec in: LoopInner)
; ELSI:       BB_E: ; preds = [[LOOPINNER]]
; ELSI-NEXT:    store i32 4, i32* @E, align 4 ; no mustexec loop
; ELSI-NEXT:    br label [[BB22]] ; no mustexec loop
; ELSI:       bb22: ; preds = [[BB_E]], [[LOOPINNER]]
; ELSI-NEXT:    [[TMP29]] = add nsw i32 [[TMP22]], 1 ; (mustexec in: LoopInner)
; ELSI-NEXT:    [[TMP30:%.*]] = icmp ne i32 [[TMP22]], 0 ; (mustexec in: LoopInner)
; ELSI-NEXT:    br i1 [[TMP30]], label [[LOOPINNER]], label [[BB_F]] ; (mustexec in: LoopInner)
; ELSI:       BB_F: ; preds = [[BB22]]
; ELSI-NEXT:    store i32 5, i32* @F, align 4 ; no mustexec loop
; ELSI-NEXT:    br label [[LOOPOUTER]] ; no mustexec loop
; ELSI:       BB_G: ; preds = [[BB_D]]
; ELSI-NEXT:    store i32 6, i32* @G, align 4 ; no mustexec loop
; ELSI-NEXT:    ret void ; no mustexec loop
;
BB_A:
  store i32 0, i32* @A, align 4
  br label %LoopOuter

LoopOuter:                                        ; preds = %bb10, %BB_F, %BB_A
  %.0 = phi i32 [ %arg, %BB_A ], [ %tmp29, %BB_F ], [ %tmp11, %bb10 ]
  store i32 1, i32* @B, align 4
  %tmp5 = add nsw i32 %.0, 1
  %tmp6 = icmp ne i32 %.0, 0
  br i1 %tmp6, label %BB_C, label %bb10

BB_C:                                             ; preds = %LoopOuter
  store i32 2, i32* @C, align 4
  br label %bb10

bb10:                                             ; preds = %BB_C, %LoopOuter
  %tmp11 = add nsw i32 %tmp5, 1
  %tmp12 = icmp ne i32 %tmp5, 0
  br i1 %tmp12, label %LoopOuter, label %BB_D

BB_D:                                             ; preds = %bb10
  store i32 3, i32* @D, align 4
  %tmp17 = add nsw i32 %tmp11, 1
  %tmp18 = icmp ne i32 %tmp11, 0
  br i1 %tmp18, label %BB_G, label %LoopInner

LoopInner:                                        ; preds = %BB_D, %bb22
  %.1 = phi i32 [ %tmp29, %bb22 ], [ %tmp17, %BB_D ]
  %tmp22 = add nsw i32 %.1, 1
  %tmp23 = icmp ne i32 %.1, 0
  br i1 %tmp23, label %bb22, label %BB_E

BB_E:                                             ; preds = %LoopInner
  store i32 4, i32* @E, align 4
  br label %bb22

bb22:                                             ; preds = %LoopInner, %BB_E
  %tmp29 = add nsw i32 %tmp22, 1
  %tmp30 = icmp ne i32 %tmp22, 0
  br i1 %tmp30, label %LoopInner, label %BB_F

BB_F:                                             ; preds = %bb22
  store i32 5, i32* @F, align 4
  br label %LoopOuter

BB_G:                                             ; preds = %BB_D
  store i32 6, i32* @G, align 4
  ret void
}

; Function Attrs: willreturn nounwind
define void @foo_willreturn_nounwind(i32 %arg) willreturn nounwind {
;
; BOTH-LABEL: @foo_willreturn_nounwind(
; BOTH-NEXT:  BB_A:
; BOTH-NEXT:    store i32 0, i32* @A, align 4 ; no mustexec loop
; BOTH-NEXT:    br label [[LOOPOUTER:%.*]] ; no mustexec loop
; BOTH:       LoopOuter: ; preds = [[BB_F:%.*]], [[BB10:%.*]], [[BB_A:%.*]]
; BOTH-NEXT:    [[DOT0:%.*]] = phi i32 [ [[ARG:%.*]], [[BB_A]] ], [ [[TMP29:%.*]], [[BB_F]] ], [ [[TMP11:%.*]], [[BB10]] ] ; (mustexec in: LoopOuter)
; BOTH-NEXT:    store i32 1, i32* @B, align 4 ; (mustexec in: LoopOuter)
; BOTH-NEXT:    [[TMP5:%.*]] = add nsw i32 [[DOT0]], 1 ; (mustexec in: LoopOuter)
; BOTH-NEXT:    [[TMP6:%.*]] = icmp ne i32 [[DOT0]], 0 ; (mustexec in: LoopOuter)
; BOTH-NEXT:    br i1 [[TMP6]], label [[BB_C:%.*]], label [[BB10]] ; (mustexec in: LoopOuter)
; BOTH:       BB_C: ; preds = [[LOOPOUTER]]
; BOTH-NEXT:    store i32 2, i32* @C, align 4 ; no mustexec loop
; BOTH-NEXT:    br label [[BB10]] ; no mustexec loop
; BOTH:       bb10: ; preds = [[BB_C]], [[LOOPOUTER]]
; BOTH-NEXT:    [[TMP11]] = add nsw i32 [[TMP5]], 1 ; (mustexec in: LoopOuter)
; BOTH-NEXT:    [[TMP12:%.*]] = icmp ne i32 [[TMP5]], 0 ; (mustexec in: LoopOuter)
; BOTH-NEXT:    br i1 [[TMP12]], label [[LOOPOUTER]], label [[BB_D:%.*]] ; (mustexec in: LoopOuter)
; BOTH:       BB_D: ; preds = [[BB10]]
; BOTH-NEXT:    store i32 3, i32* @D, align 4 ; (mustexec in: LoopOuter)
; BOTH-NEXT:    [[TMP17:%.*]] = add nsw i32 [[TMP11]], 1 ; (mustexec in: LoopOuter)
; BOTH-NEXT:    [[TMP18:%.*]] = icmp ne i32 [[TMP11]], 0 ; (mustexec in: LoopOuter)
; BOTH-NEXT:    br i1 [[TMP18]], label [[BB_G:%.*]], label [[LOOPINNER:%.*]] ; (mustexec in: LoopOuter)
; BOTH:       LoopInner: ; preds = [[BB22:%.*]], [[BB_D]]
; BOTH-NEXT:    [[DOT1:%.*]] = phi i32 [ [[TMP29]], [[BB22]] ], [ [[TMP17]], [[BB_D]] ] ; (mustexec in: LoopInner)
; BOTH-NEXT:    [[TMP22:%.*]] = add nsw i32 [[DOT1]], 1 ; (mustexec in: LoopInner)
; BOTH-NEXT:    [[TMP23:%.*]] = icmp ne i32 [[DOT1]], 0 ; (mustexec in: LoopInner)
; BOTH-NEXT:    br i1 [[TMP23]], label [[BB22]], label [[BB_E:%.*]] ; (mustexec in: LoopInner)
; BOTH:       BB_E: ; preds = [[LOOPINNER]]
; BOTH-NEXT:    store i32 4, i32* @E, align 4 ; no mustexec loop
; BOTH-NEXT:    br label [[BB22]] ; no mustexec loop
; BOTH:       bb22: ; preds = [[BB_E]], [[LOOPINNER]]
; BOTH-NEXT:    [[TMP29]] = add nsw i32 [[TMP22]], 1 ; (mustexec in: LoopInner)
; BOTH-NEXT:    [[TMP30:%.*]] = icmp ne i32 [[TMP22]], 0 ; (mustexec in: LoopInner)
; BOTH-NEXT:    br i1 [[TMP30]], label [[LOOPINNER]], label [[BB_F]] ; (mustexec in: LoopInner)
; BOTH:       BB_F: ; preds = [[BB22]]
; BOTH-NEXT:    store i32 5, i32* @F, align 4 ; no mustexec loop
; BOTH-NEXT:    br label [[LOOPOUTER]] ; no mustexec loop
; BOTH:       BB_G: ; preds = [[BB_D]]
; BOTH-NEXT:    store i32 6, i32* @G, align 4 ; no mustexec loop
; BOTH-NEXT:    ret void ; no mustexec loop
;
BB_A:
  store i32 0, i32* @A, align 4
  br label %LoopOuter

LoopOuter:                                        ; preds = %bb10, %BB_F, %BB_A
  %.0 = phi i32 [ %arg, %BB_A ], [ %tmp29, %BB_F ], [ %tmp11, %bb10 ]
  store i32 1, i32* @B, align 4
  %tmp5 = add nsw i32 %.0, 1
  %tmp6 = icmp ne i32 %.0, 0
  br i1 %tmp6, label %BB_C, label %bb10

BB_C:                                             ; preds = %LoopOuter
  store i32 2, i32* @C, align 4
  br label %bb10

bb10:                                             ; preds = %BB_C, %LoopOuter
  %tmp11 = add nsw i32 %tmp5, 1
  %tmp12 = icmp ne i32 %tmp5, 0
  br i1 %tmp12, label %LoopOuter, label %BB_D

BB_D:                                             ; preds = %bb10
  store i32 3, i32* @D, align 4
  %tmp17 = add nsw i32 %tmp11, 1
  %tmp18 = icmp ne i32 %tmp11, 0
  br i1 %tmp18, label %BB_G, label %LoopInner

LoopInner:                                        ; preds = %BB_D, %bb22
  %.1 = phi i32 [ %tmp29, %bb22 ], [ %tmp17, %BB_D ]
  %tmp22 = add nsw i32 %.1, 1
  %tmp23 = icmp ne i32 %.1, 0
  br i1 %tmp23, label %bb22, label %BB_E

BB_E:                                             ; preds = %LoopInner
  store i32 4, i32* @E, align 4
  br label %bb22

bb22:                                             ; preds = %LoopInner, %BB_E
  %tmp29 = add nsw i32 %tmp22, 1
  %tmp30 = icmp ne i32 %tmp22, 0
  br i1 %tmp30, label %LoopInner, label %BB_F

BB_F:                                             ; preds = %bb22
  store i32 5, i32* @F, align 4
  br label %LoopOuter

BB_G:                                             ; preds = %BB_D
  store i32 6, i32* @G, align 4
  ret void
}
