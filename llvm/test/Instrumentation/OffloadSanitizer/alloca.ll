; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5

target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-p7:160:256:256:32-p8:128:128-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-G1-ni:7:8:9"
target triple = "amdgcn-amd-amdhsa"

; Test basic offload sanitizer trap instrumentation.

; RUN: opt < %s -passes=offload-sanitizer -S | FileCheck --check-prefixes=CHECK %s

define i32 @dealloc_i32(ptr addrspace(5) %a) {
; CHECK-LABEL: define i32 @dealloc_i32(
; CHECK-SAME: ptr addrspace(5) [[A:%.*]]) {
; CHECK-NEXT:    [[PC:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; CHECK-NEXT:    [[TMP1:%.*]] = call ptr addrspace(5) @__offload_san_check_as5_access(i64 [[PC]], ptr addrspace(5) [[A]], i32 4)
; CHECK-NEXT:    [[L:%.*]] = load i32, ptr addrspace(5) [[TMP1]], align 4
; CHECK-NEXT:    ret i32 [[L]]
;
  %l = load i32, ptr addrspace(5) %a
  ret i32 %l
}

define i64 @dealloc_i64(ptr addrspace(5) %a) {
; CHECK-LABEL: define i64 @dealloc_i64(
; CHECK-SAME: ptr addrspace(5) [[A:%.*]]) {
; CHECK-NEXT:    [[PC:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; CHECK-NEXT:    [[TMP1:%.*]] = call ptr addrspace(5) @__offload_san_check_as5_access(i64 [[PC]], ptr addrspace(5) [[A]], i32 8)
; CHECK-NEXT:    [[L:%.*]] = load i64, ptr addrspace(5) [[TMP1]], align 8
; CHECK-NEXT:    ret i64 [[L]]
;
  %l = load i64, ptr addrspace(5) %a
  ret i64 %l
}

define i32 @test_alloca1() {
; CHECK-LABEL: define i32 @test_alloca1() {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[A:%.*]] = alloca i32, align 4, addrspace(5)
; CHECK-NEXT:    [[PC2:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; CHECK-NEXT:    [[TMP0:%.*]] = call ptr addrspace(5) @__offload_san_register_alloca(i64 [[PC2]], ptr addrspace(5) [[A]])
; CHECK-NEXT:    [[PC:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; CHECK-NEXT:    [[TMP1:%.*]] = call ptr addrspace(5) @__offload_san_check_as5_access(i64 [[PC]], ptr addrspace(5) [[TMP0]], i32 4)
; CHECK-NEXT:    store i32 7, ptr addrspace(5) [[TMP1]], align 4
; CHECK-NEXT:    [[PC1:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; CHECK-NEXT:    [[TMP2:%.*]] = call ptr addrspace(5) @__offload_san_check_as5_access(i64 [[PC1]], ptr addrspace(5) [[TMP0]], i32 4)
; CHECK-NEXT:    [[L:%.*]] = load i32, ptr addrspace(5) [[TMP2]], align 4
; CHECK-NEXT:    ret i32 [[L]]
;
entry:
  %a = alloca i32, addrspace(5)
  store i32 7, ptr addrspace(5) %a
  %l = load i32, ptr addrspace(5) %a
  ret i32 %l
}

define i32 @test_alloca2() {
; CHECK-LABEL: define i32 @test_alloca2() {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[A:%.*]] = alloca i32, align 4, addrspace(5)
; CHECK-NEXT:    [[PC1:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; CHECK-NEXT:    [[TMP0:%.*]] = call ptr addrspace(5) @__offload_san_register_alloca(i64 [[PC1]], ptr addrspace(5) [[A]])
; CHECK-NEXT:    [[PC:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; CHECK-NEXT:    [[TMP1:%.*]] = call ptr addrspace(5) @__offload_san_check_as5_access(i64 [[PC]], ptr addrspace(5) [[TMP0]], i32 4)
; CHECK-NEXT:    store i32 7, ptr addrspace(5) [[TMP1]], align 4
; CHECK-NEXT:    [[R:%.*]] = call i32 @dealloc_i32(ptr addrspace(5) [[TMP0]])
; CHECK-NEXT:    ret i32 [[R]]
;
entry:
  %a = alloca i32, addrspace(5)
  store i32 7, ptr addrspace(5) %a
  %r = call i32 @dealloc_i32(ptr addrspace(5) %a)
  ret i32 %r
}

define i32 @test_alloca3(i32 %idx) {
; CHECK-LABEL: define i32 @test_alloca3(
; CHECK-SAME: i32 [[IDX:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[A:%.*]] = alloca [4 x i32], align 4, addrspace(5)
; CHECK-NEXT:    [[PC1:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; CHECK-NEXT:    [[TMP0:%.*]] = call ptr addrspace(5) @__offload_san_register_alloca(i64 [[PC1]], ptr addrspace(5) [[A]])
; CHECK-NEXT:    [[G:%.*]] = getelementptr [4 x i32], ptr addrspace(5) [[TMP0]], i32 0, i32 [[IDX]]
; CHECK-NEXT:    [[PC:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; CHECK-NEXT:    [[TMP1:%.*]] = call ptr addrspace(5) @__offload_san_check_as5_access(i64 [[PC]], ptr addrspace(5) [[G]], i32 4)
; CHECK-NEXT:    store i32 7, ptr addrspace(5) [[TMP1]], align 4
; CHECK-NEXT:    [[R:%.*]] = call i32 @dealloc_i32(ptr addrspace(5) [[G]])
; CHECK-NEXT:    ret i32 [[R]]
;
entry:
  %a = alloca [4 x i32], addrspace(5)
  %g = getelementptr [4 x i32], ptr addrspace(5) %a, i32 0, i32 %idx
  store i32 7, ptr addrspace(5) %g
  %r = call i32 @dealloc_i32(ptr addrspace(5) %g)
  ret i32 %r
}

define i32 @test_alloca4(i32 %idx) {
; CHECK-LABEL: define i32 @test_alloca4(
; CHECK-SAME: i32 [[IDX:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[A:%.*]] = alloca [4 x i32], align 4, addrspace(5)
; CHECK-NEXT:    [[PC1:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; CHECK-NEXT:    [[TMP0:%.*]] = call ptr addrspace(5) @__offload_san_register_alloca(i64 [[PC1]], ptr addrspace(5) [[A]])
; CHECK-NEXT:    [[G:%.*]] = getelementptr i32, ptr addrspace(5) [[TMP0]], i32 [[IDX]]
; CHECK-NEXT:    [[PC:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; CHECK-NEXT:    [[TMP1:%.*]] = call ptr addrspace(5) @__offload_san_check_as5_access(i64 [[PC]], ptr addrspace(5) [[G]], i32 4)
; CHECK-NEXT:    store i32 7, ptr addrspace(5) [[TMP1]], align 4
; CHECK-NEXT:    [[R:%.*]] = call i32 @dealloc_i64(ptr addrspace(5) [[G]])
; CHECK-NEXT:    ret i32 [[R]]
;
entry:
  %a = alloca [4 x i32], addrspace(5)
  %g = getelementptr i32, ptr addrspace(5) %a, i32 %idx
  store i32 7, ptr addrspace(5) %g
  %r = call i32 @dealloc_i64(ptr addrspace(5) %g)
  ret i32 %r
}

define i32 @test_alloca5(i32 %idx) {
; CHECK-LABEL: define i32 @test_alloca5(
; CHECK-SAME: i32 [[IDX:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[A:%.*]] = alloca i32, i32 4, align 256, addrspace(5)
; CHECK-NEXT:    [[PC1:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; CHECK-NEXT:    [[TMP0:%.*]] = call ptr addrspace(5) @__offload_san_register_alloca(i64 [[PC1]], ptr addrspace(5) [[A]])
; CHECK-NEXT:    [[G:%.*]] = getelementptr i32, ptr addrspace(5) [[TMP0]], i32 [[IDX]]
; CHECK-NEXT:    [[PC:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; CHECK-NEXT:    [[TMP1:%.*]] = call ptr addrspace(5) @__offload_san_check_as5_access(i64 [[PC]], ptr addrspace(5) [[G]], i32 4)
; CHECK-NEXT:    store i32 7, ptr addrspace(5) [[TMP1]], align 4
; CHECK-NEXT:    [[R:%.*]] = call i32 @dealloc_i64(ptr addrspace(5) [[G]])
; CHECK-NEXT:    ret i32 [[R]]
;
entry:
  %a = alloca i32, i32 4, align 256, addrspace(5)
  %g = getelementptr i32, ptr addrspace(5) %a, i32 %idx
  store i32 7, ptr addrspace(5) %g
  %r = call i32 @dealloc_i64(ptr addrspace(5) %g)
  ret i32 %r
}

define i32 @test_alloca6(i32 %idx) {
; CHECK-LABEL: define i32 @test_alloca6(
; CHECK-SAME: i32 [[IDX:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[A:%.*]] = alloca i32, align 4, addrspace(5)
; CHECK-NEXT:    [[PC2:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; CHECK-NEXT:    [[TMP0:%.*]] = call ptr addrspace(5) @__offload_san_register_alloca(i64 [[PC2]], ptr addrspace(5) [[A]])
; CHECK-NEXT:    [[C:%.*]] = addrspacecast ptr addrspace(5) [[TMP0]] to ptr
; CHECK-NEXT:    [[PC:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; CHECK-NEXT:    [[TMP1:%.*]] = call ptr @__offload_san_check_as0_access(i64 [[PC]], ptr [[C]], i32 4)
; CHECK-NEXT:    store i32 7, ptr [[TMP1]], align 4
; CHECK-NEXT:    [[PC1:%.*]] = call i64 @llvm.amdgcn.s.getpc()
; CHECK-NEXT:    [[TMP2:%.*]] = call ptr @__offload_san_check_as0_access(i64 [[PC1]], ptr [[C]], i32 4)
; CHECK-NEXT:    [[L:%.*]] = load i32, ptr [[TMP2]], align 4
; CHECK-NEXT:    ret i32 [[L]]
;
entry:
  %a = alloca i32, addrspace(5)
  %c = addrspacecast ptr addrspace(5) %a to ptr
  store i32 7, ptr %c
  %l = load i32, ptr %c
  ret i32 %l
}
